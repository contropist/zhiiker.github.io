<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卮客杂俎</title>
  
  <subtitle>造故事的手艺工人，现代魔法师。 A handicraftsworker of stories, and a modern magician.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhiiker.com/"/>
  <updated>2019-08-10T10:03:01.000Z</updated>
  <id>https://www.zhiiker.com/</id>
  
  <author>
    <name>卮客</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>评论系统更换为livere</title>
    <link href="https://www.zhiiker.com/2021/03/28/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/2019-08-10.%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%8D%A2%E4%B8%BAlivere/"/>
    <id>https://www.zhiiker.com/2021/03/28/建站日志/2019-08-10.评论系统更换为livere/</id>
    <published>2021-03-28T14:18:26.439Z</published>
    <updated>2019-08-10T10:03:01.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>现在要给博客加个第三方评论系统，还要国内能正常访问，是真的难。各大评论系统倒了一个又一个，之前用的Valine用的leancloud的服务，今天来邮件提醒说要绑定域名，本来这个系统就是正在开发的状态，一些功能不完善，leancloud最近也出了几次问题，终于下决心要换了，找了一圈livere算是一个不错的解决方案。</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>1.访问<a href="https://livere.com/">livere官网</a>，注册账号。<br>2.登录后点击导航栏“安装”，选择city版。<br><img src="https://images.liangs.me/hexo/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/_image/72726a87b4ad14acaf3a4e4c4433c094_750.png"><br>3.根据提示，申请获取代码。</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>1.在<code>/yelee/_config.yml</code>中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># livere配置</span><br><span class="line">livere: </span><br><span class="line">  on: true</span><br><span class="line">  uid: #你的uid,代码中有</span><br></pre></td></tr></table></figure><p>2.在<code>/yelee/layout/_partial/article.ejs</code>中插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% &#125; else if (theme.livere.on)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&#x27;comments/livere&#x27;, &#123;</span><br><span class="line">        key: post.slug,</span><br><span class="line">        title: post.title,</span><br><span class="line">        url: config.url+url_for(post.path)</span><br><span class="line">      &#125;) %&gt;</span><br></pre></td></tr></table></figure><p>3.创建<code>/yelee/layout/_partial/comments/livere.ejs</code>文件，写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;section id=&quot;comments&quot; style=&quot;margin: 2em; padding: 2em; background: rgba(255, 255, 255, 0.5)&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;vcomment&quot; class=&quot;comment&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">    &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&lt;%=theme.livere.uid%&gt;&quot;&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            (function (d, s) &#123;</span><br><span class="line">                var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">                if (typeof LivereTower === &#x27;function&#x27;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">                j = d.createElement(s);</span><br><span class="line">                j.src = &#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;;</span><br><span class="line">                j.async = true;</span><br><span class="line"></span><br><span class="line">                e.parentNode.insertBefore(j, e);</span><br><span class="line">            &#125;)(document, &#x27;script&#x27;);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><p>大功告成，测试发布。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在要给博客加个第三方评论系统，还要国内能正常访问，是真的难。各大评论系统倒了一个又一个，之前用的Valine用的leancloud的服务，今天来邮件提醒说要绑定域名，本来这个系统就是正在开发的状态，一些功能不完善，leancloud最近也出了几次问题，终于下决心要换了，找了一圈livere算是一个不错的解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="评论" scheme="https://www.zhiiker.com/tags/%E8%AF%84%E8%AE%BA/"/>
    
      <category term="建站" scheme="https://www.zhiiker.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>服务器测试脚本集合</title>
    <link href="https://www.zhiiker.com/2019/08/30/%E7%AC%94%E8%AE%B0/2019-08-30.%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88/"/>
    <id>https://www.zhiiker.com/2019/08/30/笔记/2019-08-30.服务器测试脚本集合/</id>
    <published>2019-08-30T07:56:37.000Z</published>
    <updated>2019-08-30T07:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>部分脚本来自<a href="https://www.mrkevin.net/share/1383.html">Mr.KevinH</a></p></blockquote><h2 id="综合测试"><a href="#综合测试" class="headerlink" title="综合测试"></a>综合测试</h2><h3 id="原始版本Bench"><a href="#原始版本Bench" class="headerlink" title="原始版本Bench"></a>原始版本Bench</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget freevps.us/downloads/bench.sh -O - -o /dev/null|bash</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="秋水逸冰的Bench-sh脚本"><a href="#秋水逸冰的Bench-sh脚本" class="headerlink" title="秋水逸冰的Bench.sh脚本"></a>秋水逸冰的Bench.sh脚本</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>显示当前测试的各种系统信息</li><li>取自世界多处的知名数据中心的测试点，下载测试比较全面</li><li>支持 IPv6 下载测速；</li><li>IO 测试三次，并显示平均值。<h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- bench.sh | bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Lso- bench.sh | bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- 86.re/bench.sh | bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -so- 86.re/bench.sh | bash</span><br></pre></td></tr></table></figure><h4 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h4><p><a href="https://github.com/teddysun/across/blob/master/bench.sh">https://github.com/teddysun/across/blob/master/bench.sh</a></p><h3 id="老鬼的SuperBench测试脚本"><a href="#老鬼的SuperBench测试脚本" class="headerlink" title="老鬼的SuperBench测试脚本"></a>老鬼的SuperBench测试脚本</h3><p>这个脚本是在基于秋水大佬脚本的基础上，加入了独服通电时间，服务器虚拟化架构等内容</p><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><p>改进了显示的模式，基本参数添加了颜色，方面区分与查找。<br>I/O测试，更改了原来默认的测试的内容，采用小文件，中等文件，大文件，分别测试IO性能，然后取平均值。<br>速度测试替换成了 Superspeed 里面的测试，第一个默认节点是，Speedtest 默认，其他分别测试到中国电信，联通，移动，各三个不同地区的速度。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Lso- -no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash</span><br></pre></td></tr></table></figure><p>Github</p><p><a href="https://github.com/oooldking/script/blob/master/superbench.sh">https://github.com/oooldking/script/blob/master/superbench.sh</a></p><h3 id="91yuntest"><a href="#91yuntest" class="headerlink" title="91yuntest"></a>91yuntest</h3><p>在线脚本生成地址</p><p><a href="https://www.91yuntest.com/">https://www.91yuntest.com/</a></p><h4 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/91yuntest/master/test_91yun.sh &amp;&amp; bash test_91yun.sh</span><br></pre></td></tr></table></figure><p>普通模式就是之前的测试常规内容。测试输出结果请参考：普通模式结果样式参考</p><h4 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a><a href="https://github.com/zhiiker/91yuntest#%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8F"></a>简单模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/91yuntest/master/test_91yun.sh &amp;&amp; bash test_91yun.sh s</span><br></pre></td></tr></table></figure><p>简单模式的测试包含：常规系统参数检测，带宽测试，IO测试和全国ping测试。测试输出结果请参考：简单模式结果样式参考<br>主要因为普通模式的下载测试和路由测试有些耗时，有时大家可能只需要快速获得这台服务器的参数，带宽，io和延迟是多少。那么简单模式可以节省大量的时间。如果需要进一步的信息则可以使用普通模式。<br>相比普通模式，就是在命令最后加个s参数： bash test_91yun.sh s</p><h4 id="完全模式"><a href="#完全模式" class="headerlink" title="完全模式"></a><a href="https://github.com/zhiiker/91yuntest#%E5%AE%8C%E5%85%A8%E6%A8%A1%E5%BC%8F"></a>完全模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/91yuntest/master/test_91yun.sh &amp;&amp; bash test_91yun.sh a</span><br></pre></td></tr></table></figure><p>完全模式相比普通模式多了unixbench的测试，测试输出结果请参考：完全模式结果样式参考<br>相比普通模式，就是在命令最后加个a参数： bash test_91yun.sh a<br>由于unixbench的测试极其耗资源（cpu和io会长时间处于占满状态），有些IDC禁用，会杀进程或者判断滥用。请谨慎测试。<br>另外unixbench的测试也极其耗时间，建议大家在screen下运行。</p><h3 id="Zbench"><a href="#Zbench" class="headerlink" title="Zbench"></a>Zbench</h3><p>脚本由漏水和kirito，基于Oldking的SuperBench，然后加入Ping以及路由测试的功能，还能生成测评报告，分享给其他人查看测评数据。</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><p>中文版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh</span><br></pre></td></tr></table></figure><p>英文版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench.sh &amp;&amp; bash ZBench.sh</span><br></pre></td></tr></table></figure><h4 id="演示地址"><a href="#演示地址" class="headerlink" title="演示地址"></a>演示地址</h4><p><a href="https://www.zhujiboke.com/zbench-example.html">https://www.zhujiboke.com/zbench-example.html</a></p><h3 id="Linux-Server-Bench-Test"><a href="#Linux-Server-Bench-Test" class="headerlink" title="Linux-Server-Bench-Test"></a>Linux-Server-Bench-Test</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/chiakge/Linux-Server-Bench-Test/master/linuxtest.sh -N --no-check-certificate</span><br></pre></td></tr></table></figure><p>运行说明</p><h4 id="不含UnixBench的测试，无网页分享"><a href="#不含UnixBench的测试，无网页分享" class="headerlink" title="不含UnixBench的测试，无网页分享"></a>不含UnixBench的测试，无网页分享</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash linuxtest.sh</span><br></pre></td></tr></table></figure><h4 id="不含UnixBench的测试，带网页分享"><a href="#不含UnixBench的测试，带网页分享" class="headerlink" title="不含UnixBench的测试，带网页分享"></a>不含UnixBench的测试，带网页分享</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash linuxtest.sh s</span><br></pre></td></tr></table></figure><h4 id="含UnixBench的测试，不带网页分享"><a href="#含UnixBench的测试，不带网页分享" class="headerlink" title="含UnixBench的测试，不带网页分享"></a>含UnixBench的测试，不带网页分享</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash linuxtest.sh a</span><br></pre></td></tr></table></figure><h4 id="含UnixBench的测试，带网页分享"><a href="#含UnixBench的测试，带网页分享" class="headerlink" title="含UnixBench的测试，带网页分享"></a>含UnixBench的测试，带网页分享</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash linuxtest.sh as</span><br></pre></td></tr></table></figure><h2 id="服务器性能测试"><a href="#服务器性能测试" class="headerlink" title="服务器性能测试"></a>服务器性能测试</h2><h3 id="LemonBench"><a href="#LemonBench" class="headerlink" title="LemonBench"></a>LemonBench</h3><p>LemonBench工具(别名LBench、柠檬Bench)，是一款针对Linux服务器设计的服务器性能测试工具。通过综合测试，可以快速评估服务器的综合性能，为使用者提供服务器硬件配置信息。</p><h4 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://ilemonrain.com/download/shell/LemonBench.sh | bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://ilemonrain.com/download/shell/LemonBench.sh | bash</span><br></pre></td></tr></table></figure><h3 id="UnixBench测试脚本"><a href="#UnixBench测试脚本" class="headerlink" title="UnixBench测试脚本"></a>UnixBench测试脚本</h3><p>UnixBench是一个类unix系（Unix，BSD，Linux）统下的性能测试工具，一个开源工具，被广泛用与测试linux系统主机的性能。Unixbench的主要测试项目有：系统调用、读写、进程、图形化测试、2D、3D、管道、运算、C库等系统基准性能提供测试数据。</p><h4 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh</span><br><span class="line">chmod +x unixbench.sh</span><br><span class="line">./unixbench.sh</span><br></pre></td></tr></table></figure><p>带宽测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.github.com/sivel/speedtest-cli/master/speedtest.py</span><br><span class="line">chmod a+rx speedtest.py</span><br><span class="line">python speedtest.py</span><br></pre></td></tr></table></figure><h3 id="内存检测脚本"><a href="#内存检测脚本" class="headerlink" title="内存检测脚本"></a>内存检测脚本</h3><p>检测VPS真实可分配内存的小工具，适用于检测VPS超售情况。本程序检测的可分配内存指的是用户使用时最大能占用的内存量。</p><h4 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h4><h4 id="CentOS-RHEL"><a href="#CentOS-RHEL" class="headerlink" title="CentOS / RHEL"></a>CentOS / RHEL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install wget -y</span><br><span class="line">yum groupinstall &quot;Development Tools&quot; -y</span><br><span class="line">wget https://raw.githubusercontent.com/FunctionClub/Memtester/master/memtester.cpp</span><br><span class="line">gcc -l stdc++ memtester.cpp</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><p>Ubuntu / Debian</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install wget build-essential -y</span><br><span class="line">wget https://raw.githubusercontent.com/FunctionClub/Memtester/master/memtester.cpp</span><br><span class="line">gcc -l stdc++ memtester.cpp</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><h2 id="网络测试"><a href="#网络测试" class="headerlink" title="网络测试"></a>网络测试</h2><h3 id="Ping值测试"><a href="#Ping值测试" class="headerlink" title="Ping值测试"></a>Ping值测试</h3><p>uPing——一个24小时监测VPS延迟的工具</p><h4 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h4><p>Debian / Ubuntu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install python wget screen -y</span><br></pre></td></tr></table></figure><p>CentOS / RHEL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install screen wget python -y</span><br></pre></td></tr></table></figure><h4 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -S uping</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/uPing/master/uping.py</span><br><span class="line">python uping.py</span><br></pre></td></tr></table></figure><h3 id="speedtest-cli"><a href="#speedtest-cli" class="headerlink" title="speedtest-cli"></a>speedtest-cli</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.github.com/sivel/speedtest-cli/master/speedtest.py </span><br><span class="line">chmod a+rx speedtest.py </span><br><span class="line">sudo mv speedtest.py /usr/<span class="built_in">local</span>/bin/speedtest-cli </span><br><span class="line">sudo chown root:root /usr/<span class="built_in">local</span>/bin/speedtest-cli</span><br><span class="line">speedtest-cli</span><br></pre></td></tr></table></figure><h3 id="路由测试脚本"><a href="#路由测试脚本" class="headerlink" title="路由测试脚本"></a>路由测试脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/nanqinlang-script/testrace/master/testrace.sh </span><br><span class="line">bash testrace.sh</span><br></pre></td></tr></table></figure><h3 id="回程路由测试"><a href="#回程路由测试" class="headerlink" title="回程路由测试"></a>回程路由测试</h3><p>从你的 Linux(X86/ARM)/Mac/BSD 系统环境下发起 traceroute 请求，附带链路可视化，兼容性更好，支持JSON 格式。<br>下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.ipip.net/17mon/besttrace4linux.zip</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip besttrace4linux.zip</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./besttrace -q 1 这里是目标IP</span><br></pre></td></tr></table></figure><h3 id="回程ping"><a href="#回程ping" class="headerlink" title="回程ping"></a>回程ping</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/helloxz/mping/master/mping.sh</span><br><span class="line">bash mping.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;部分脚本来自&lt;a href=&quot;https://www.mrkevin.net/share/1383.html&quot;&gt;Mr.KevinH&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;综合测试&quot;&gt;&lt;a href=&quot;#综合测试&quot; class=&quot;headerlink&quot; title=&quot;综合测试&quot;&gt;&lt;/a&gt;综合测试&lt;/h2&gt;&lt;h3 id=&quot;原始版本Bench&quot;&gt;&lt;a href=&quot;#原始版本Bench&quot; class=&quot;headerlink&quot; title=&quot;原始版本Bench&quot;&gt;&lt;/a&gt;原始版本Bench&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget freevps.us/downloads/bench.sh -O - -o /dev/null|bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="https://www.zhiiker.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="测试" scheme="https://www.zhiiker.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>卮言日出，和以天倪丨《寓言》章一</title>
    <link href="https://www.zhiiker.com/2019/06/18/%E6%8B%BE%E6%91%98/2019-06-18.%E5%8D%AE%E8%A8%80%E6%97%A5%E5%87%BA%EF%BC%8C%E5%92%8C%E4%BB%A5%E5%A4%A9%E5%80%AA%E4%B8%A8%E3%80%8A%E5%AF%93%E8%A8%80%E3%80%8B%E7%AB%A0%E4%B8%80/"/>
    <id>https://www.zhiiker.com/2019/06/18/拾摘/2019-06-18.卮言日出，和以天倪丨《寓言》章一/</id>
    <published>2019-06-18T08:49:12.000Z</published>
    <updated>2019-06-19T02:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>《庄子》解，每章一读。</strong></p><p><strong>文：</strong></p><blockquote><p>寓言十九，重言十七，卮言日出，和以天倪。</p><p>寓言十九，藉外论之。亲父不为其子媒。亲父誉之，不若非其父者也；非吾罪也，人之罪也。与己同则应，不与己同则反；同于己为是之，异于己为非之。</p><p>重言十七，所以已言也，是为耆艾。年先矣，而无经纬本末以期年耆者，是非先也。人而无以先人，无人道也；人而无人道，是之谓陈人。</p><p>卮言日出，和以天倪，因以曼衍，所以穷年。不言则齐，齐与言不齐，言与齐不齐也，故曰言无言。言无言，终身言，未尝言；终身不言，未尝不言。有自也而可，有自也而不可；有自也而然，有自也而不然。恶乎然？然于然。恶乎不然？不然于不然。恶乎可？可于可。恶乎不可？不可于不可。物固有所然，物固有所可，无物不然，无物不可。非卮言日出，和以天倪，孰得其久！万物皆种也，以不同形相禅，始卒若环，莫得其伦，是谓天均。天均者天倪也。</p></blockquote><span id="more"></span><p><strong>解：</strong></p><p>本章讲“三言”。</p><p>做庄子言论研究的人，几乎没人能绕开对“三言”——寓言、重言、卮言——的讨论。在读《庄子》文本时，我们经常会犯一个错误：凡举文本的内容，都无疑是庄子认可的。其浅其薄已不待多言。人们大多认为，三言是庄子自己及其认可的独特言说方式和言说内容。这没有问题。但庄子怎么个认可法，却论之寥寥。</p><p>“寓言十九”“重言十七”，有人认为“十九”“十七”分别指寓言、重言篇幅占全书的十分之九，十分之七。（如张默生、陈鼓应等）也有人认为，“十九”“十七”指寓言、重言有十分之九、十分之七的可信度。（如郭象等）宜从后者。（以事实来说，前者也没问题，但就文意言，过于枯乏。）回过头看这两言，它们当真为庄子认可，还是另有品评？</p><p>寓言的言说方式是“藉外论之”。这里的“外”指客观的他者，为什么要有这么个“外”呢？我们知道，《庄子》对“成心”大有批判，认为人的很多不当行为都源出成心。成心可指既定的偏见，也可指某些知识。“亲父不为亲子谋”，父子之间有个“亲”，“亲”就是成心的表现。就这个问题看，要想避免某种成心，就需要外人的言论。但这样就没问题了吗？“与己同则应，不与己同则反；同于己为是之，异于己为非之。”人还是会根据自己的认知、倾向的价值去应，去反，去是，去非。所以“寓言十九”，还有一分不信。那这么看来，庄子对寓言的认可保有限度。</p><p>重言是耆艾长者的“已言”。这里出现了一个称为“先”的词。“年先矣，而无经纬本末以期年耆者，是非先也。”“先”首先不是指年龄的长老，而是说有伴随年纪增长的“精微本末”的见识。进一步说，重言也可叫威言，其中包含见识和威信，与年纪没有必然联系。浏览古代经典，我们发现，中国自古就有引经据典的习惯；往后还形成了先圣先贤的叙事方式。重言正于此有所揭示。人们把先圣先贤的“经纬本末”之论称为“人道”，视不得“人道”的人为陈腐之人。按照《庄子》文本的看法，时移势迁，先圣先贤的言论反而是陈腐的。此处用“陈人”正反讽重言的不可信，其不可信的成分比寓言还多两分。</p><p>寓言和重言皆是《庄子》文本书写的重要方式。但既然二者都不完全可信，为什么还要用它们呢？这里有必要考虑到权宜的方法。二者虽都不完善，但仍可藉以论之。此外，我们也要意识到深意：不管是寓言还是重言，其背后的言论并不是目的，而只是路途。</p><p>再来看看卮言。卮言又称为道言，是契合道的言。“卮言日出，和以天倪，因以曼衍，所以穷年。”卮言生生，合乎天的分际，散漫流行，悠游终生。不管卮言有个致命的漏洞。既是卮言，那也是“言”，是言就有分别，有分别就不齐，不齐就不与天地合德；但“卮言”之“卮”又合于天地之德。对于这样的背反，文本也说“不言则齐，齐与言不齐，言与齐不齐也，故曰言无言。”卮言又叫“言无言”。“言无言，终身言，未尝言；终身不言，未尝不言。”卮言就是这样的“两面派”，又言又不言，由不言由言。什么意思呢？</p><p>“物固有所然，物固有所可，无物不然，无物不可。”物有所然，有所可；有所不然，有所不可。这是基于人的视角对物然不然、可不可的定分。“言无言，终身言，未尝言；终身不言，未尝不言。”这是说，物自在自然自可，没有想说什么，但它确实在着、然着、可着，这些又好像是它告诉了我们。追究起来，物的自在自然自可又与天地合德，无有始终，不可测度，那卮言也是这样的。所以才说“始卒若环，莫得其伦”。</p><blockquote></blockquote><p>作者：千里飘蓬<br>链接：<a href="https://www.jianshu.com/p/25269f60945b">https://www.jianshu.com/p/25269f60945b</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;《庄子》解，每章一读。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;寓言十九，重言十七，卮言日出，和以天倪。&lt;/p&gt;
&lt;p&gt;寓言十九，藉外论之。亲父不为其子媒。亲父誉之，不若非其父者也；非吾罪也，人之罪也。与己同则应，不与己同则反；同于己为是之，异于己为非之。&lt;/p&gt;
&lt;p&gt;重言十七，所以已言也，是为耆艾。年先矣，而无经纬本末以期年耆者，是非先也。人而无以先人，无人道也；人而无人道，是之谓陈人。&lt;/p&gt;
&lt;p&gt;卮言日出，和以天倪，因以曼衍，所以穷年。不言则齐，齐与言不齐，言与齐不齐也，故曰言无言。言无言，终身言，未尝言；终身不言，未尝不言。有自也而可，有自也而不可；有自也而然，有自也而不然。恶乎然？然于然。恶乎不然？不然于不然。恶乎可？可于可。恶乎不可？不可于不可。物固有所然，物固有所可，无物不然，无物不可。非卮言日出，和以天倪，孰得其久！万物皆种也，以不同形相禅，始卒若环，莫得其伦，是谓天均。天均者天倪也。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="拾摘" scheme="https://www.zhiiker.com/categories/%E6%8B%BE%E6%91%98/"/>
    
    
      <category term="卮客" scheme="https://www.zhiiker.com/tags/%E5%8D%AE%E5%AE%A2/"/>
    
      <category term="名字" scheme="https://www.zhiiker.com/tags/%E5%90%8D%E5%AD%97/"/>
    
      <category term="卮言" scheme="https://www.zhiiker.com/tags/%E5%8D%AE%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>卮客杂俎的含义</title>
    <link href="https://www.zhiiker.com/2019/04/22/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/2019-04-22.%E5%8D%AE%E5%AE%A2%E6%9D%82%E4%BF%8E%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <id>https://www.zhiiker.com/2019/04/22/建站日志/2019-04-22.卮客杂俎的含义/</id>
    <published>2019-04-22T06:50:53.000Z</published>
    <updated>2019-06-18T12:43:14.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>杂俎是杂录、笔记的意思，比如著名的《酉阳杂俎》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="卮客" scheme="https://www.zhiiker.com/tags/%E5%8D%AE%E5%AE%A2/"/>
    
      <category term="名字" scheme="https://www.zhiiker.com/tags/%E5%90%8D%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>Press.one 授权</title>
    <link href="https://www.zhiiker.com/2019/02/17/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/Press.one%20%E6%8E%88%E6%9D%83/"/>
    <id>https://www.zhiiker.com/2019/02/17/建站日志/Press.one 授权/</id>
    <published>2019-02-16T16:00:00.000Z</published>
    <updated>2019-02-17T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>签名：<br><a href="https://press.one/p/v?s=15dbacda8a8b94f5be1f611ba0a50660d3ab6df144262848cedc27eb3172b49020f4d0295bf9d5366c4f0cf8180b01843eae89643db2ed2f3859850187f4f9521&amp;h=85bde49df11fecbe8b122d71d5fcf1ae00cce9cc3e2f1aa8172bcd5ba680885c&amp;a=77e5df6b17f82eb846d93aa1854063f3dbfb1b79&amp;f=P1&amp;v=3">https://press.one/p/v?s=15dbacda8a8b94f5be1f611ba0a50660d3ab6df144262848cedc27eb3172b49020f4d0295bf9d5366c4f0cf8180b01843eae89643db2ed2f3859850187f4f9521&amp;h=85bde49df11fecbe8b122d71d5fcf1ae00cce9cc3e2f1aa8172bcd5ba680885c&amp;a=77e5df6b17f82eb846d93aa1854063f3dbfb1b79&amp;f=P1&amp;v=3</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="萱苏小筑" scheme="https://www.zhiiker.com/categories/%E8%90%B1%E8%8B%8F%E5%B0%8F%E7%AD%91/"/>
    
    
      <category term="建站日志" scheme="https://www.zhiiker.com/tags/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>博客修复</title>
    <link href="https://www.zhiiker.com/2018/12/30/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/2018-12-30.%E5%8D%9A%E5%AE%A2%E4%BF%AE%E5%A4%8D/"/>
    <id>https://www.zhiiker.com/2018/12/30/建站日志/2018-12-30.博客修复/</id>
    <published>2018-12-30T13:38:31.000Z</published>
    <updated>2018-12-30T14:01:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实在不能忍受博客出现的一些问题了，于是开始修复。</p><span id="more"></span><h2 id="侧边栏社交栏中的github图标不显示"><a href="#侧边栏社交栏中的github图标不显示" class="headerlink" title="侧边栏社交栏中的github图标不显示"></a>侧边栏社交栏中的github图标不显示</h2><p>参考<a href="https://github.com/MOxFIVE/yelee/issues/27">github的图标不显示</a><br>不显示的的原因是原文件中GitHub图标的地址已经失效了，如图<br><img src="https://images.liangs.me/bitcron/Diary/2018/_image/ab545381d6ee0c017c29acc485d84b70_006tNc79ly1fvn0lg3z4oj30ya04qdgr.jpg"><br>解决方案：在<a href="http://www.iconfont.cn/">这里</a>下载一个github图标放到/yelee/source/img/下并命名为GitHub.png，然后在/yelee/source/css/_partial/customise/social-icon.styl的img-logo中加入GitHub black 75，接着删掉46-50行的即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.GitHub</span><br><span class="line">    background url(//cdn.bootcss.com/logos/0.2.0/github-octocat.svg) no-repeat white</span><br><span class="line">    background-size 90%</span><br><span class="line">    background-position 50% 100%</span><br></pre></td></tr></table></figure><h2 id="社交栏部分被挡住"><a href="#社交栏部分被挡住" class="headerlink" title="社交栏部分被挡住"></a>社交栏部分被挡住</h2><p>这是宽度被限制了<br><code>main.styl</code>中修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.switch-area&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    min-height: 300px;</span><br><span class="line">    font-size: (14/16)rem;</span><br><span class="line">    .switch-wrap&#123;</span><br><span class="line">        transition: transform .3s ease-in;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="评论系统从Disqus到Valine"><a href="#评论系统从Disqus到Valine" class="headerlink" title="评论系统从Disqus到Valine"></a>评论系统从Disqus到Valine</h2><p>Yelee主题默认支持三款评论系统：Disqus，多说和友言评论。而目前多说和友言已经不能用了，Disqus也需要科学上网才可以加载使用。参考<a href="https://suixinblog.cn/2018/09/valine.html">suixin的方案</a>将评论系统从Disqus换成了基于Leancloud的valine。样式不错，非常干净，可以后台管理评论、反垃圾。</p><h2 id="Github关联"><a href="#Github关联" class="headerlink" title="Github关联"></a>Github关联</h2><p>之前换过主题之后失效了<br>参考<a href="http://moxfive.xyz/2016/01/10/hexo-post-version-control/">关联 GitHub, 让 Hexo 支持查看文章更新历史</a><br>开个repo把<code>hexo/sources/_posts</code>放到Github上。修改<code>./themes/yelee/layout/_partial/post/nav.ejs</code>文件，相应位置修改并添加如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 不设置 backup: false 则默认显示 --&gt;</span><br><span class="line">&lt;% if (post.backup != false)&#123; %&gt;</span><br><span class="line"> &lt;p&gt;</span><br><span class="line">    &lt;span&gt;更新历史:&lt;/span&gt;&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;!-- 不同功能替换前面超链接即可，文件名不变 --&gt;</span><br><span class="line">    &lt;!-- 文件名生成: &lt;%= post.date.format(&quot;YYYY-MM-DD&quot;) %&gt;.&lt;%= post.slug %&gt; --&gt;</span><br><span class="line">    &lt;a href=&quot;https://github.com/wmwwmv/BlogBackup/blame/master/_posts/&lt;%= post.slug %&gt;.md&quot; title=&quot;顺序查看文章各部分修改记录&quot; target = &quot;_blank&quot;&gt;Blame&lt;/a&gt;,</span><br><span class="line">    &lt;a href=&quot;https://github.com/wmwwmv/BlogBackup/commits/master/_posts/&lt;%= post.slug %&gt;.md&quot; title=&quot;查看文章有关更新记录&quot; target = &quot;_blank&quot;&gt;History&lt;/a&gt;&lt;span class=&quot;raw&quot;&gt;文本模式:&lt;/span&gt;&lt;i class=&quot;fa fa-file-text-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;a href=&quot;https://raw.githubusercontent.com/wmwwmv/BlogBackup/master/_posts/&lt;%= post.slug %&gt;.md&quot; title=&quot;查看 &amp; 下载文章 Markdown 原始文本&quot; target = &quot;_blank&quot;&gt; .md Raw&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实在不能忍受博客出现的一些问题了，于是开始修复。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.zhiiker.com/tags/hexo/"/>
    
      <category term="blog" scheme="https://www.zhiiker.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Seafile安装与配置v3</title>
    <link href="https://www.zhiiker.com/2018/12/13/%E7%AC%94%E8%AE%B0/2018-12-12.Seafile%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEv3/"/>
    <id>https://www.zhiiker.com/2018/12/13/笔记/2018-12-12.Seafile安装与配置v3/</id>
    <published>2018-12-13T13:10:26.000Z</published>
    <updated>2018-12-30T10:09:27.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>迁移了下seafile服务器，发现以前的那个教程过时了，现在重新开一个。<br>用的是Ubuntu 16.04LTS，并且开通全部端口。<br>为了管理方便安装宝塔面板，在这里可以配置防火墙。</p><span id="more"></span><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br></pre></td></tr></table></figure><p>创建程序目录seafile，建议放在root目录之外，防止因为权限产生的错误，给775权限，文件夹所有者root。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">mkdir cloud seafile</span><br><span class="line">chmod 775 seafile</span><br></pre></td></tr></table></figure><p>从官网下载seafile安装包，专业版需要到seafile英文版网站登陆客户中心后获取。<br>社区版下载地址<code>https://www.seafile.com/en/download/</code><br>专业版下载地址<code>https://download.seafile.com/d/6e5297246c/?p=/pro</code><br>seafile-server-6.3.4 64bit版本下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.seadrive.org/seafile-server_6.3.4_x86-64.tar.gz</span><br></pre></td></tr></table></figure><p>下载后解压到seafile文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf seafile-server_*</span><br></pre></td></tr></table></figure><p>移动安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir installed</span><br><span class="line">mv seafile-server_* installed</span><br></pre></td></tr></table></figure><p>解压后检查下目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># tree . -L 2</span><br><span class="line">.</span><br><span class="line">├── installed</span><br><span class="line">│   └── seafile-server_*_x86-64.tar.gz</span><br><span class="line">└── seafile-server-*</span><br><span class="line">    ├── reset-admin.sh</span><br><span class="line">    ├── runtime</span><br><span class="line">    ├── seafile</span><br><span class="line">    ├── seafile.sh</span><br><span class="line">    ├── seahub</span><br><span class="line">    ├── seahub.sh</span><br><span class="line">    ├── setup-seafile.sh</span><br><span class="line">    └── upgrade</span><br></pre></td></tr></table></figure><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><ul><li>MariaDB 或者 MySQL 服务器 (MariaDB 是 MySQL 的分支)</li><li>python 2.7 (从 Seafile 5.1 开始，python 版本最低要求为2.7）</li><li>python-setuptools</li><li>python-imaging</li><li>python-mysqldb</li><li>python-ldap</li><li>python-urllib3</li><li>python-memcache (或者 python-memcached)</li><li>jre<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python</span><br><span class="line">sudo apt-get install python2.7 libpython2.7 python-setuptools python-ldap python-urllib3 ffmpeg python-pip python-mysqldb python-memcache python-requests</span><br><span class="line">pip install Pillow</span><br><span class="line">pip install moviepy  <span class="comment"># used in movie file thumbnails</span></span><br><span class="line">sudo apt-get install openjdk-8-jre</span><br></pre></td></tr></table></figure>安装数据库并设置数据库roor密码这里我使用面板创建<br>命令行安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-client-core-5.7</span><br></pre></td></tr></table></figure>再顺便安好pureftpd、phpMyAdmin、Memcached<br>自己安装Memcached的话直接安装django-pylibmc模块，并且最好将缓存设置大于128M<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-pylibmc</span><br></pre></td></tr></table></figure>配置也要相应的修改，按照官方的文档的配置在启动seahub调试时会报错<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.PyLibMCCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;127.0.0.1.11211&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置MySQL数据库"><a href="#配置MySQL数据库" class="headerlink" title="配置MySQL数据库"></a>配置MySQL数据库</h3>seafile由3个核心部件组成。 我们需要为这个给定的组件创建一个数据库。这一步可以使用官方提供的脚本自动进行。</li><li>ccnet服务器</li><li>seafile服务器</li><li>seahub<br>现在正在为列出的给定数据库创建mysql数据库，帐户和设置权限。 （这只是一个例子，您可以在数据库名称上创建自己的设计）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seafile部件 | 数据库名称 | 帐户 </span><br><span class="line">ccnet服务器 | ccnet-db | seafile </span><br><span class="line">seafile服务器 | seafile-db | seafile </span><br><span class="line">seahub | seahub-db | seafile </span><br></pre></td></tr></table></figure><p>以root用户身份登录到mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入之前安装设置的Mysql密码，然后在mysql shell中发出这些命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database`ccnet-db`character set =utf8; </span><br><span class="line">create database`seafile-db`character set =utf8; </span><br><span class="line">create database`seahub-db`character set =utf8; </span><br><span class="line">create user &#x27;seafile&#x27;@&#x27;localhost&#x27; identified by &#x27;seafile&#x27;;</span><br><span class="line">grant all privileges on `ccnet-db`.* to `seafile`@localhost;</span><br><span class="line">grant all privileges on `seafile-db`.* to `seafile`@localhost;</span><br><span class="line">grant all privileges on `seahub-db`.* to `seafile`@localhost;</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd seafile-server-pro-*</span><br><span class="line">./setup-seafile-mysql.sh</span><br></pre></td></tr></table></figure><p>下面配置按你需求填写<br>第一项是主机名称<br>第二项是主机的IP或者域名<br>第三项是seafile存储数据存放位置这里填的是<code>/cloud</code><br>第四项是端口默认即可<br>第五项是数据库，如果没有按照上面创建数据库，这里可以选1自动配置，然后输入数据库的配置信息</p><p>这样一般就会成功了，没有成功的话可能是没有创建目录的权限用root权限运行下就可以。<br>如果用宝塔面板，成功之后需要手动放行8000和8082端口。<br>到了这一步就可以启动了<br>在 seafile-server-pro-*目录下，运行如下命令：</p><ul><li>启动Seafile:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./seafile.sh start</span><br></pre></td></tr></table></figure></li><li>启动Seahub（默认运行在8000端口上）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./seahub.sh start</span><br></pre></td></tr></table></figure><h2 id="一些配置"><a href="#一些配置" class="headerlink" title="一些配置"></a>一些配置</h2><h3 id="更改端口"><a href="#更改端口" class="headerlink" title="更改端口"></a>更改端口</h3>参考官方文档:</li></ul><p><strong>6.2.x 及其之前版本</strong></p><ul><li>关闭 Seafile 服务器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./seahub.sh stop # 停止 Seafile 进程</span><br><span class="line">./seafile.sh stop # 停止 Seahub</span><br></pre></td></tr></table></figure></li><li>更改<code>*/conf/ccnet.conf</code>文件中<code>SERVICE\_URL</code> 的值(假设你的 ip 或者域名时<code>192.168.1.100</code>), 如下 (从 5.0 版本开始，可以直接在管理员界面中设置。注意，如果同时在 Web 界面和配置文件中设置了这个值，以 Web 界面的配置为准。):<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`SERVICE_URL = http://192.168.1.100:8001 `</span><br></pre></td></tr></table></figure></li><li>重启 Seafile 服务器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./seafile.sh start # 启动 Seafile 服务</span><br><span class="line">./seahub.sh start 8001 # 启动 Seahub 网站 （运行在8001端口上）</span><br></pre></td></tr></table></figure></li></ul><p><strong>6.3.x 及其以上版本</strong></p><p>6.3.0 及其之后的版本，我们弃用了 <code>./seahub.sh start &lt;port&gt;</code> 的方式使seahub进程监听在其他端口。但是，您可以通过修改 <code>conf/gunicorn.conf</code> 中的端口设置来指定seahub启动端口。</p><ul><li>关闭 Seafile 服务器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./seahub.sh stop # 停止 Seafile 进程</span><br><span class="line">./seafile.sh stop # 停止 Seahub</span><br></pre></td></tr></table></figure></li><li>更改<code>*/conf/ccnet.conf</code>文件中<code>SERVICE\_URL</code> 的值(假设你的 ip 或者域名时<code>192.168.1.100</code>), 如下 (从 5.0 版本开始，可以直接在管理员界面中设置。注意，如果同时在 Web 界面和配置文件中设置了这个值，以 Web 界面的配置为准。):<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`SERVICE_URL = http://192.168.1.100:8001 `</span><br></pre></td></tr></table></figure></li><li><strong>修改conf/gunicorn.conf</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># default localhost:8000</span><br><span class="line">bind = &quot;0.0.0.0:8001&quot;</span><br></pre></td></tr></table></figure></li><li>重启 Seafile 服务器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./seafile.sh start # 启动 Seafile 服务</span><br><span class="line">./seahub.sh start # 启动 Seahub 网站 （运行在8001端口上）</span><br></pre></td></tr></table></figure><h3 id="邮件提醒"><a href="#邮件提醒" class="headerlink" title="邮件提醒"></a>邮件提醒</h3>按照<a href="https://manual-cn.seafile.com/config/sending_email.html">官方文档</a>配置<h3 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h3><a href="https://manual-cn.seafile.com/deploy/add_memcached.html">官方文档</a><br>如果使用<a href="https://pypi.org/project/django-pylibmc/">django-pylibmc</a>组件修改相应段落为<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.PyLibMCCache&#x27;</span><br></pre></td></tr></table></figure><h3 id="多存储后端"><a href="#多存储后端" class="headerlink" title="多存储后端"></a>多存储后端</h3><a href="https://manual-cn.seafile.com/deploy_pro/multiple_storage_backends.html">官方文档</a><h3 id="webdav"><a href="#webdav" class="headerlink" title="webdav"></a>webdav</h3>修改conf文件夹下的seafdav.conf<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[WEBDAV]</span><br><span class="line">enabled = true</span><br><span class="line">port = 8080</span><br><span class="line">fastcgi = true</span><br><span class="line">host = 0.0.0.0</span><br><span class="line">share_name = /</span><br></pre></td></tr></table></figure><h3 id="开启-Office-PDF-文件在线预览"><a href="#开启-Office-PDF-文件在线预览" class="headerlink" title="开启 Office/PDF 文件在线预览"></a>开启 Office/PDF 文件在线预览</h3><a href="https://manual-cn.seafile.com/deploy_pro/office_documents_preview.html">官方文档</a><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3>如果需要使用Nginx的话<br>参见<a href="https://manual-cn.seafile.com/deploy/deploy_with_nginx.html">官方文档</a><br>这里是我的配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">listen 443 ssl http2;</span><br><span class="line">    server_name cloud.liangs.me;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    root /www/wwwroot/cloud.liangs.me;</span><br><span class="line">    </span><br><span class="line">    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br><span class="line">    #error_page 404/404.html;</span><br><span class="line">    #HTTP_TO_HTTPS_START</span><br><span class="line">    if ($server_port !~ 443)&#123;</span><br><span class="line">        rewrite ^(/.*)$ https://$host$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    #HTTP_TO_HTTPS_END</span><br><span class="line">    ssl_certificate    /etc/letsencrypt/live/cloud.liangs.me/fullchain.pem;</span><br><span class="line">    ssl_certificate_key    /etc/letsencrypt/live/cloud.liangs.me/privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    error_page 497  https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">    #SSL-END</span><br><span class="line">    </span><br><span class="line">    #ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">    error_page 502 /502.html;</span><br><span class="line">    #ERROR-PAGE-END</span><br><span class="line">    </span><br><span class="line">    #PHP-INFO-START  PHP引用配置，可以注释或修改</span><br><span class="line">    include enable-php-00.conf;</span><br><span class="line">    #PHP-INFO-END</span><br><span class="line">    </span><br><span class="line">    #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span><br><span class="line">    include /www/server/panel/vhost/rewrite/cloud.liangs.me.conf;</span><br><span class="line">    #REWRITE-END</span><br><span class="line">    </span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;;</span><br><span class="line">    server_tokens off;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass         http://127.0.0.1:8000;</span><br><span class="line">    proxy_set_header   Host $host;</span><br><span class="line">    proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header   X-Forwarded-Host $server_name;</span><br><span class="line">    proxy_set_header   X-Forwarded-Proto https;</span><br><span class="line">    proxy_read_timeout  1200s;</span><br><span class="line"></span><br><span class="line"># used for view/edit office file via Office Online Server</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /seafhttp &#123;</span><br><span class="line">        rewrite ^/seafhttp(.*)$ $1 break;</span><br><span class="line">        proxy_pass http://127.0.0.1:8082;</span><br><span class="line">        client_max_body_size 0;</span><br><span class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_connect_timeout  36000s;</span><br><span class="line">        proxy_read_timeout  36000s;</span><br><span class="line">        proxy_send_timeout  36000s;</span><br><span class="line">        send_timeout  36000s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /media &#123;</span><br><span class="line">        root /root/seafile-pro-server-6.2.9/seahub;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    #禁止访问的文件或目录</span><br><span class="line">    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br><span class="line">    &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #一键申请SSL证书验证目录相关设置</span><br><span class="line">    location ~ \.well-known&#123;</span><br><span class="line">        allow all;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    access_log  /www/wwwlogs/cloud.liangs.me.log;</span><br><span class="line">    error_log  /www/wwwlogs/cloud.liangs.me.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3>参考<a href="https://manual-cn.seafile.com/deploy/start_seafile_at_system_bootup.html">官方文档</a><br>这里是我的三个配置文件</li><li>seafile.service<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Seafile hub</span><br><span class="line">After=network.target seafile.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># change start to start-fastcgi if you want to run fastcgi</span></span><br><span class="line">ExecStart=/seafile/seafile-server-latest/seahub.sh start</span><br><span class="line">ExecStop=/seafile/seafile-server-latest/seahub.sh stop</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li>seahub.service<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Seafile hub</span><br><span class="line">After=network.target seafile.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># change start to start-fastcgi if you want to run fastcgi</span></span><br><span class="line">ExecStart=/seafile/seafile-server-latest/seahub.sh start</span><br><span class="line">ExecStop=/seafile/seafile-server-latest/seahub.sh stop</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li>seafile-client.service<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Seafile client</span><br><span class="line"><span class="comment"># Uncomment the next line you are running seafile client on the same computer as server</span></span><br><span class="line"><span class="comment"># After=seafile.service</span></span><br><span class="line"><span class="comment"># Or the next one in other case</span></span><br><span class="line"><span class="comment"># After=network.target</span></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/usr/bin/seaf-cli start</span><br><span class="line">ExecStop=/usr/bin/seaf-cli stop</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><strong>Ubuntu 14.10 以及更旧的版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          seafile-server</span></span><br><span class="line"><span class="comment"># Required-Start: $remote_fs $syslog mysql</span></span><br><span class="line"><span class="comment"># Required-Stop:     $remote_fs $syslog</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Seafile server</span></span><br><span class="line"><span class="comment"># Description:       Start Seafile server</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change the value of &quot;user&quot; to your linux user name</span></span><br><span class="line">user=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change the value of &quot;seafile_dir&quot; to your path of seafile installation</span></span><br><span class="line"><span class="comment"># usually the home directory of $user</span></span><br><span class="line">seafile_dir=/seafile</span><br><span class="line">script_path=<span class="variable">$&#123;seafile_dir&#125;</span>/seafile-server-latest</span><br><span class="line">seafile_init_log=<span class="variable">$&#123;seafile_dir&#125;</span>/logs/seafile.init.log</span><br><span class="line">seahub_init_log=<span class="variable">$&#123;seafile_dir&#125;</span>/logs/seahub.init.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change the value of fastcgi to true if fastcgi is to be used</span></span><br><span class="line">fastcgi=<span class="literal">false</span></span><br><span class="line"><span class="comment"># Set the port of fastcgi, default is 8000. Change it if you need different.</span></span><br><span class="line">fastcgi_port=80</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Write a polite log message with date and time</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n \n About to perform <span class="variable">$1</span> for seafile at `date -Iseconds` \n &quot;</span> &gt;&gt; <span class="variable">$&#123;seafile_init_log&#125;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n \n About to perform <span class="variable">$1</span> for seahub at `date -Iseconds` \n &quot;</span> &gt;&gt; <span class="variable">$&#123;seahub_init_log&#125;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">                sudo -u <span class="variable">$&#123;user&#125;</span> <span class="variable">$&#123;script_path&#125;</span>/seafile.sh <span class="variable">$&#123;1&#125;</span> &gt;&gt; <span class="variable">$&#123;seafile_init_log&#125;</span></span><br><span class="line">                <span class="keyword">if</span> [ <span class="variable">$fastcgi</span> = <span class="literal">true</span> ];</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        sudo -u <span class="variable">$&#123;user&#125;</span> <span class="variable">$&#123;script_path&#125;</span>/seahub.sh <span class="variable">$&#123;1&#125;</span>-fastcgi <span class="variable">$&#123;fastcgi_port&#125;</span> &gt;&gt; <span class="variable">$&#123;seahub_init_log&#125;</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        sudo -u <span class="variable">$&#123;user&#125;</span> <span class="variable">$&#123;script_path&#125;</span>/seahub.sh <span class="variable">$&#123;1&#125;</span> &gt;&gt; <span class="variable">$&#123;seahub_init_log&#125;</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">        restart)</span><br><span class="line">                sudo -u <span class="variable">$&#123;user&#125;</span> <span class="variable">$&#123;script_path&#125;</span>/seafile.sh <span class="variable">$&#123;1&#125;</span> &gt;&gt; <span class="variable">$&#123;seafile_init_log&#125;</span></span><br><span class="line">                <span class="keyword">if</span> [ <span class="variable">$fastcgi</span> = <span class="literal">true</span> ];</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        sudo -u <span class="variable">$&#123;user&#125;</span> <span class="variable">$&#123;script_path&#125;</span>/seahub.sh <span class="variable">$&#123;1&#125;</span>-fastcgi <span class="variable">$&#123;fastcgi_port&#125;</span> &gt;&gt; <span class="variable">$&#123;seahub_init_log&#125;</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        sudo -u <span class="variable">$&#123;user&#125;</span> <span class="variable">$&#123;script_path&#125;</span>/seahub.sh <span class="variable">$&#123;1&#125;</span> &gt;&gt; <span class="variable">$&#123;seahub_init_log&#125;</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">        stop)</span><br><span class="line">                sudo -u <span class="variable">$&#123;user&#125;</span> <span class="variable">$&#123;script_path&#125;</span>/seahub.sh <span class="variable">$&#123;1&#125;</span> &gt;&gt; <span class="variable">$&#123;seahub_init_log&#125;</span></span><br><span class="line">                sudo -u <span class="variable">$&#123;user&#125;</span> <span class="variable">$&#123;script_path&#125;</span>/seafile.sh <span class="variable">$&#123;1&#125;</span> &gt;&gt; <span class="variable">$&#123;seafile_init_log&#125;</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Usage: /etc/init.d/seafile-server &#123;start|stop|restart&#125;&quot;</span></span><br><span class="line">                <span class="built_in">exit</span> 1</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 如果你正在使用本地 mysql 服务，请将 <code># Required-Start: $remote\_fs $syslog</code> 替换为 <code># Required-Start: $remote\_fs $syslog mysql</code>.<br>确保 seafile-server 脚本可执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/init.d/seafile-server</span><br></pre></td></tr></table></figure><p>添加 seafile-server 到 rc.d 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d seafile-server defaults</span><br></pre></td></tr></table></figure><h2 id="错误调试"><a href="#错误调试" class="headerlink" title="错误调试"></a>错误调试</h2><p>出现No module named memcache错误<br>安装缺少的组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-pylibmc</span><br></pre></td></tr></table></figure><p>或者换成django-pylibmc，并且如上文配置</p>]]></content>
    
    <summary type="html">
    
      迁移了下seafile服务器，发现以前的那个教程过时了，现在重新开一个。
    
    </summary>
    
    
      <category term="seafile" scheme="https://www.zhiiker.com/tags/seafile/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客升级小记</title>
    <link href="https://www.zhiiker.com/2018/12/09/%E7%AC%94%E8%AE%B0/2018-12-09.Hexo%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E5%B0%8F%E8%AE%B0/"/>
    <id>https://www.zhiiker.com/2018/12/09/笔记/2018-12-09.Hexo博客升级小记/</id>
    <published>2018-12-08T16:00:00.000Z</published>
    <updated>2018-12-30T10:12:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>手里多了些服务器，想整理一下手里各个网站的部署，发现以前写的文章有些问题，需要重新写，于是就有了这篇文章。<br>这里采用Dropbox进行同步，最好是使用境外的服务器，如果使用境内的服务器需要配置代理。<br>这个方案主要有以下几个优点：</p><ul><li>自己拥有数据</li><li>可以实现多终端编辑，Dropbox无缝同步</li><li>在服务器端使用了Hexo-admin插件，可以在网页端编辑文章并实时预览</li><li>服务器是一个自动部署中心，一旦监测到修改，会自动提交到Github</li><li>使用GitPages进行托管，拥有动态+静态博客的优点<span id="more"></span><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2></li></ul><p>1.首先登陆vps需要执行如下命令更新各种依赖<br>2.为防止机器没有安装epel，先安装epel(必须安装)</p><ul><li>升级 CentOS 内核 <code>yum -y update</code></li><li>安装 Git <code>yum install git-core</code><br>导入key<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import http://download-i2.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6</span><br></pre></td></tr></table></figure>安装epel，分别是32位和64位<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://download-i2.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</span><br><span class="line">rpm -Uvh http://download-i2.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>然后安装yum-priorities<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install yum-priorities -y</span><br></pre></td></tr></table></figure>安装好后用命令看下，如果成功的话输出内容里有epel字样<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure></li></ul><p>3.安装Node.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br><span class="line">sudo yum install npm --enablerepo=epel</span><br></pre></td></tr></table></figure><h2 id="安装Dropbox"><a href="#安装Dropbox" class="headerlink" title="安装Dropbox"></a>安装Dropbox</h2><p>网上给出的教程试了好几次都有问题，自己搜到了正确的姿势<br>参考说明:<a href="http://www.dropboxwiki.com/tips-and-tricks/install-dropbox-in-an-entirely-text-based-linux-environment">nstall Dropbox In An Entirely Text-Based Linux Environment</a><br>注意:这里最好使用非Root的用户运行<br>安装代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">32位</span><br><span class="line">wget -O dropbox.tar.gz &quot;http://www.dropbox.com/download/?plat=lnx.x86&quot;</span><br><span class="line">64位</span><br><span class="line">wget https://clientupdates.dropboxstatic.com/dbx-releng/client/dropbox-lnx.x86_64-30.4.22.tar.gz</span><br><span class="line">tar -xvzf dropbox-lnx.x86_64-30.4.22.tar.gz</span><br></pre></td></tr></table></figure><p>然后执行，登录Dropbox的账号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.dropbox-dist/dropboxd</span><br></pre></td></tr></table></figure><p>首次打开需要你验证账户。选择有右键复制上面一段，浏览器打开，登录你的Dropbox账号，授权这台机器参与你的网盘同步，关联成功会出现如下画面，Ctrl+C一下<br><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-16-21-05.jpg"></p><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-16-24-40.jpg"></p><p>注意：进入连接后，一定要等刷新完毕后再点，并且不能结束终端，等到关联成功的消息。</p><h3 id="Dropbox使用"><a href="#Dropbox使用" class="headerlink" title="Dropbox使用"></a>Dropbox使用</h3><p>切换到dropbox.py脚本所在位置<br>查看dropbox 工作状态<code>./dropbox.py status</code><br>开始同步 <code>./dropbox.py start</code><br>停止同步 <code>./dropbox.py stop</code><br>帮助 <code>./dropbox.py exclude help</code></p><h4 id="选择性同步文件夹"><a href="#选择性同步文件夹" class="headerlink" title="选择性同步文件夹"></a>选择性同步文件夹</h4><p>例如你不需要同步<code>Dropbox/books/</code>目录，进入Dropbox目录<code>cd ~/Dropbox</code>，运行exclude来排除books目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dropboxy.py exclude add books #当前目录最好在Dropbox</span><br></pre></td></tr></table></figure><p>更多不需要同步的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dropboxy.py exclude add book photos Public Documents #排除Dropbox目录下books, photos, Public, Documents等目录</span><br></pre></td></tr></table></figure><p>这里讲/public等生成的静态文件文件夹去掉就行了</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>1.在刚才上面的结束之后 ls一下看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]# ls</span><br><span class="line">Dropbox  dropbox.tar.gz</span><br></pre></td></tr></table></figure><p>2.切进去Dropbox目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Dropbox</span><br></pre></td></tr></table></figure><p>3.接下来创建博客的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line">cd hexo</span><br></pre></td></tr></table></figure><p>4.开始正式安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#网上教程里的很多命令在256或者128内存下全部是坑，因为内存关系安装不了</span><br><span class="line">npm install hexo-cli -g   </span><br><span class="line">#初始化hexo</span><br><span class="line">hexo init        </span><br><span class="line">hexo generate    #可缩写为：hexo g</span><br><span class="line">hexo server      #可缩写为：hexo s</span><br></pre></td></tr></table></figure><p>这时端口4000被打开了，我们能过浏览器打开地址<code>http://&lt;服务器ip&gt;:4000/</code>访问测试一下看能不能看到首页，如果看不到或者结果不是OK，请排查错误。</p><p>添加防火墙例外</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 4000 -j ACCEPT</span><br></pre></td></tr></table></figure><p>或直接关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#临时生效，重启后复原</span><br><span class="line">开启： service iptables start</span><br><span class="line">关闭： service iptables stop</span><br><span class="line"> </span><br><span class="line">#永久性生效，重启后不会复原</span><br><span class="line">开启： chkconfig iptables on</span><br><span class="line">关闭： chkconfig iptables off</span><br></pre></td></tr></table></figure><p>这个时候可以去你的Dropbox网盘里看看有没有hexo目录，并且目录结构如下<br><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-16-29-41.jpg"></p><ul><li>下载Dropbox官方提供的一个用于管理的 Python 脚本 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://linux.dropbox.com/packages/dropbox.py</span><br></pre></td></tr></table></figure>所有命令可以点击<a href="https://www.dropbox.com/help/desktop-web/linux-commands">这里</a>查看<br>然后增加这个脚本的权限<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./dropbox.py</span><br></pre></td></tr></table></figure>加入到自启动<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dropbox.py autostart y</span><br></pre></td></tr></table></figure>然而实际测试发现这个在重启后 root 用户登录后没有自动启动，需要手动登录到为Dropbox创建的用户下进行启动，启动代码为<code> ./dropbox.py start</code> 可以用 <code>ps -e</code>命令来查看当前进程看看有没有成功启动<br><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-16-34-25.jpg"><h2 id="内容同步发布"><a href="#内容同步发布" class="headerlink" title="内容同步发布"></a>内容同步发布</h2></li></ul><p>1.安装和配置incron检测文件变化。incrond 可以监控指定目录的文件指定变化(删除修改打开移动等等)，并且运行指定命令。使用corn可以设置定时任务，另外incron不支持子文件夹的监测，需要将子文件夹也写入配置文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install incron</span><br></pre></td></tr></table></figure><p>启动并加入自启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service incrond start</span><br><span class="line">chkconfig incrond on</span><br></pre></td></tr></table></figure><p>修改默认编辑器为 Vi (貌似默认编辑器本来是一个 GUI，我们远程状态下没有 GUI)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;editor = vi&#x27; &gt;&gt; /etc/incron.conf</span><br></pre></td></tr></table></figure><p>这个时候使用以下命令来进行编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrontab -e</span><br></pre></td></tr></table></figure><p>打开后添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/笔记/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/结绳纪/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/拾摘/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/萱苏小筑/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/themes/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br></pre></td></tr></table></figure><p>会使用到的一些命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service incrond stop</span><br><span class="line">service incrond start</span><br><span class="line">service incrond status</span><br></pre></td></tr></table></figure><p>最后写 runhexo 这个脚本</p><ul><li>首先我们可以用以下指令新建空文本  <code>touch runhexo.sh</code> 注意要在 root 目录下创建。目录要对应你在 incrontab 的里写的目录。</li><li>然后打开文件进行编辑 <code>vim /root/runhexo.sh</code> </li><li>代码如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">exec</span> 200&lt;<span class="variable">$0</span></span><br><span class="line">flock -n 200 || <span class="built_in">exit</span> 1</span><br><span class="line">sleep 10</span><br><span class="line"><span class="built_in">cd</span> /root/Dropbox/hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"><span class="built_in">cd</span> /root/Dropbox/hexo/<span class="built_in">source</span>/ &amp;&amp; git add -A &amp;&amp; git commit -m <span class="string">&quot;auto commit&quot;</span> &amp;&amp; git push</span><br></pre></td></tr></table></figure>上面push到github还需要配置SSH等步骤，见后面的描述。<br>以上代码会在特定时间内只允许一个脚本实例运行。运行后会清理 Hexo 原有的静态文件, 生成新的静态文件以供读取，并且会自动传到相应的Github上的repo备份。<br>好了到这里就应该可以了。然后可以 debug 测试一下，并且可以关机给服务器搞个 snapshot 快照进行备份，以防以后出错 (重启后记得手动运行一下 Dropbox)。</li></ul><h2 id="使用hexo-hey插件为博客添加后台编辑"><a href="#使用hexo-hey插件为博客添加后台编辑" class="headerlink" title="使用hexo-hey插件为博客添加后台编辑"></a>使用hexo-hey插件为博客添加后台编辑</h2><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-17-20-09.jpg"><br>hexo-hey项目地址:<a href="https://github.com/nihgwu/hexo-hey">https://github.com/nihgwu/hexo-hey</a><br>安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-hey --save</span><br></pre></td></tr></table></figure><p>配置<code>_config.yml</code>文件<br>添加如下几行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Admin</span><br><span class="line">admin:</span><br><span class="line">    name: hexo</span><br><span class="line">    password: hey</span><br><span class="line">    secret: hey hexo</span><br><span class="line">    expire: 60*1</span><br><span class="line">    # cors: http://localhost:3000</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>这个时候你的博客网站的管理后台就可以远程的在你 VPS 的 IP地址的4000端口访问到。比如 <code>&lt;vps的ip&gt;:4000/admin</code>。</p><h2 id="配置Github-Coding多账号管理SSH-Key"><a href="#配置Github-Coding多账号管理SSH-Key" class="headerlink" title="配置Github/Coding多账号管理SSH Key"></a>配置Github/Coding多账号管理SSH Key</h2><ol><li>单个网站通过Https链接，避免22端口关闭错误。<br>测试https端口连通性<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure>添加ssh配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure>写入内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure></li><li>多网站多账号SSH Key配置</li></ol><ul><li>生成Github和Coidng的SSH Key<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -C “wmwwmv@gmail.com”</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_coding -C &quot;wmwwmv@163.com”</span><br></pre></td></tr></table></figure>检查key是否生成<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.ssh</span><br></pre></td></tr></table></figure></li><li>添加private key<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">ssh-add ~/.ssh/id_rsa_coding</span><br></pre></td></tr></table></figure>如果执行ssh-add时提示”Could not open a connection to your authentication agent”，可以先执行命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br></pre></td></tr></table></figure>然后再运行ssh-add命令。<br>可以通过 ssh-add -l 来确私钥列表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure>可以通过 ssh-add -D 来清空私钥列表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName ssh.github.com</span><br><span class="line">Port 443</span><br><span class="line">User wmwwmv@gmail.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"><span class="comment">#coding</span></span><br><span class="line">Host git.coding.net</span><br><span class="line">Hostname git-ssh.coding.net</span><br><span class="line">User wmwwmv@163.com</span><br><span class="line">Port 443</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_coding</span><br></pre></td></tr></table></figure></li><li>上传public key 到 GitHub/Coidng<br>GitHub设置过程如下：<br>登录github，点击右上方的图标，点击“Settings”</li></ul><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-17-56-16.jpg"><br>选择<code>SSH and GPG keys</code>，点击<code>New SSH key</code>，在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的<code>~/.ssh/id_isa_github.pub</code>文件内容粘帖到 key 一栏，再点击<code>Add SSH key</code>按钮就可以了。<br><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-17-56-29.jpg"><br>添加过程github会提示你输入一次你的github密码 ，确认后即添加完毕。</p><ul><li>测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试github</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="comment">#测试Coding</span></span><br><span class="line">ssh -T git@git.coding.net</span><br><span class="line"><span class="comment"># 测试gitlab</span></span><br><span class="line">ssh -T git@gitlab.example.com</span><br></pre></td></tr></table></figure>Hexo中<code>_config.yml</code>配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    github: git@github.com:wmwwmv/wmwwmv.github.io.git</span><br><span class="line">    coding: git@git.coding.net:shichao/xiaozhu.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="利用supervisor让hexo-server服务常驻后台"><a href="#利用supervisor让hexo-server服务常驻后台" class="headerlink" title="利用supervisor让hexo-server服务常驻后台"></a>利用supervisor让hexo-server服务常驻后台</h2><p>在<code>supervisord.conf</code>这个文件末尾加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/*.conf</span><br></pre></td></tr></table></figure><p>新建<code>hexo-server.conf</code>文件<br>写脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:hexo-server]</span><br><span class="line"><span class="built_in">command</span> = hexo s</span><br><span class="line">directory = /root/Dropbox/hexo</span><br><span class="line">user=root</span><br><span class="line">autostart = <span class="literal">true</span></span><br><span class="line">autorestart = <span class="literal">true</span></span><br><span class="line">stdout_logfile = /var/<span class="built_in">log</span>/supervisor/hexo.log</span><br><span class="line">stderr_logfile = /var/<span class="built_in">log</span>/supervisor/hexo_err.log</span><br></pre></td></tr></table></figure><p>supervisor的一些命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动、管理配置中设置的进程。</span></span><br><span class="line">supervisord </span><br><span class="line"><span class="comment">#停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是chatdemon。</span></span><br><span class="line">supervisorctl stop programxxx  </span><br><span class="line"><span class="comment">#启动某个进程</span></span><br><span class="line">supervisorctl start programxxx</span><br><span class="line"><span class="comment">#重启某个进程</span></span><br><span class="line">supervisorctl restart programxxx </span><br><span class="line"> <span class="comment">#重启所有属于名为groupworker这个分组的进程(start,restart同理)</span></span><br><span class="line">supervisorctl stop groupworker</span><br><span class="line"><span class="comment">#停止全部进程，注：start、restart、stop都不会载入最新的配置文件。</span></span><br><span class="line">supervisorctl stop all</span><br><span class="line"><span class="comment">#载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</span></span><br><span class="line">supervisorctl reload</span><br><span class="line"><span class="comment">#根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</span></span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><ul><li>Git同步之前需要先做些准备工作:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/Dropbox/hexo/source/ &amp;&amp; git add 404 readme.md about _drafts _posts about tags resources &amp;&amp; git commit -m &quot;auto commit&quot; &amp;&amp; git remote add origin git@github.com:wmwwmv/BlogBackup.git &amp;&amp; git push -u origin master</span><br></pre></td></tr></table></figure></li><li>使用MarkdownEditor的fileshook命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /d E:\Dropbox\hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; cd source/ &amp;&amp; git add -A &amp;&amp; git commit -m &quot;auto commit&quot; &amp;&amp; git push</span><br></pre></td></tr></table></figure>然后将第三方云设置成七牛的图床就更加完美了，不仅能拖入普遍自动生成链接，还可以自动发布。<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="hexo-deploy时重复输入用户名密码的问题"><a href="#hexo-deploy时重复输入用户名密码的问题" class="headerlink" title="hexo deploy时重复输入用户名密码的问题"></a>hexo deploy时重复输入用户名密码的问题</h3>每次部署执行hexo deploy都需要输入用户名<br><img src="https://images.liangs.me/bitcron/Notes/_image/b84f46c31486c0689dcb46fe856a3408_hexo-01.png"><br>问题原因及解决方案：<br>最主要的原因可能是你没有采用<a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;</a><br><img src="https://images.liangs.me/bitcron/Notes/_image/ff716f897db6f52aae3fe00d8a7e6ca5_hexo-04.png"><br>而是用https//github.com<br><img src="https://images.liangs.me/bitcron/Notes/_image/5a6545da6f259e0f0ee8a92550861cda_hexo-03.png"><br>修改后重新提交部署：<br><img src="https://images.liangs.me/bitcron/Notes/_image/9ac59c621f8f09f44cf517c55e0bec7d_hexo-02.png"></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>为了避免上传一次就重新将pulic .git文件夹就同步一次，所以在本地Dropbox上要选择性同步。</li><li>想利用分布式解析国内解析到coding 国外解析到github，结果国内访问github比coding还快。</li><li>迁移的时候只要保存好<code>_config.yml</code> <code>package.json</code>配置文件，<code>source</code>，<code>themes</code>文件夹，迁移的时候再重新安装环境将备份的文件覆盖后装上npm包就行。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;手里多了些服务器，想整理一下手里各个网站的部署，发现以前写的文章有些问题，需要重新写，于是就有了这篇文章。&lt;br&gt;这里采用Dropbox进行同步，最好是使用境外的服务器，如果使用境内的服务器需要配置代理。&lt;br&gt;这个方案主要有以下几个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己拥有数据&lt;/li&gt;
&lt;li&gt;可以实现多终端编辑，Dropbox无缝同步&lt;/li&gt;
&lt;li&gt;在服务器端使用了Hexo-admin插件，可以在网页端编辑文章并实时预览&lt;/li&gt;
&lt;li&gt;服务器是一个自动部署中心，一旦监测到修改，会自动提交到Github&lt;/li&gt;
&lt;li&gt;使用GitPages进行托管，拥有动态+静态博客的优点
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.zhiiker.com/tags/hexo/"/>
    
      <category term="dropbox" scheme="https://www.zhiiker.com/tags/dropbox/"/>
    
      <category term="vps" scheme="https://www.zhiiker.com/tags/vps/"/>
    
      <category term="incron" scheme="https://www.zhiiker.com/tags/incron/"/>
    
      <category term="supervisor" scheme="https://www.zhiiker.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Atom的一些问题</title>
    <link href="https://www.zhiiker.com/2018/11/18/%E7%AC%94%E8%AE%B0/2018-11-18.Atom%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://www.zhiiker.com/2018/11/18/笔记/2018-11-18.Atom一些问题/</id>
    <published>2018-11-17T16:00:00.000Z</published>
    <updated>2018-11-25T16:16:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="编译xlatex非常慢"><a href="#编译xlatex非常慢" class="headerlink" title="编译xlatex非常慢"></a>编译xlatex非常慢</h2><p>看到一篇文章<br><a href="https://bbs.pku.edu.cn/v2/post-read.php?bid=346&amp;threadid=16048205">https://bbs.pku.edu.cn/v2/post-read.php?bid=346&amp;threadid=16048205</a><br>解决了<br>管理员运行xelatex.exe</p><span id="more"></span><p>来源问题<br><a href="http://tex.stackexchange.com/questions/325278/xelatex-runs-slow-on-windows-machine">http://tex.stackexchange.com/questions/325278/xelatex-runs-slow-on-windows-machine</a></p><h2 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h2><p>在设置里要把<code>TEX PATH</code>设置成texlive的bin目录<br>把编译引擎设置成为<code>xelatex</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译xlatex非常慢&quot;&gt;&lt;a href=&quot;#编译xlatex非常慢&quot; class=&quot;headerlink&quot; title=&quot;编译xlatex非常慢&quot;&gt;&lt;/a&gt;编译xlatex非常慢&lt;/h2&gt;&lt;p&gt;看到一篇文章&lt;br&gt;&lt;a href=&quot;https://bbs.pku.edu.cn/v2/post-read.php?bid=346&amp;amp;threadid=16048205&quot;&gt;https://bbs.pku.edu.cn/v2/post-read.php?bid=346&amp;amp;threadid=16048205&lt;/a&gt;&lt;br&gt;解决了&lt;br&gt;管理员运行xelatex.exe&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用Atom写LaTeX文档</title>
    <link href="https://www.zhiiker.com/2018/11/04/%E7%AC%94%E8%AE%B0/2018-11-04.%E7%94%A8Atom%E5%86%99LaTeX%E6%96%87%E6%A1%A3/"/>
    <id>https://www.zhiiker.com/2018/11/04/笔记/2018-11-04.用Atom写LaTeX文档/</id>
    <published>2018-11-03T16:00:00.000Z</published>
    <updated>2018-12-30T10:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这套方案比用WinEdt和TexStudio好，编译的速度快，并且支持PDF实时预览。</p><h2 id="软件下载及安装"><a href="#软件下载及安装" class="headerlink" title="软件下载及安装"></a>软件下载及安装</h2><h3 id="TeX-Live"><a href="#TeX-Live" class="headerlink" title="TeX Live"></a>TeX Live</h3><p><a href="http://tug.org/texlive/acquire-netinstall.html">官方源</a><br>个人推荐使用清华的镜像，会快很多<br><a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/">清华的TUNA镜像</a><br>剩下的就是图形化安装了，不赘述，遇到问题百度下。</p><span id="more"></span><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><p><a href="https://atom.io/">Atom下载地址</a></p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>File -&gt; Settings -&gt; Install<br>搜索并安装：</p><ul><li>simplified-chinese-menu(提供汉化界面)</li><li>latex(用来在Atom中编译LaTeX文件)</li><li>language-latex(提供语法高亮)</li><li>latexer(代码自动完成)<br>不要同时安装<code>latex</code>和<code>latextools</code>插件，否则会出现<code>Atom-Latex error ‘could not read log file’</code>错误无法编译。<h3 id="Atom-安装插件时因网络原因失败怎么办？"><a href="#Atom-安装插件时因网络原因失败怎么办？" class="headerlink" title="Atom 安装插件时因网络原因失败怎么办？"></a>Atom 安装插件时因网络原因失败怎么办？</h3><h4 id="方法一-给-apm-绑代理"><a href="#方法一-给-apm-绑代理" class="headerlink" title="方法一:给 apm 绑代理"></a>方法一:给 apm 绑代理</h4>windows下打开用户文件夹<br>下面<code>~/.atom/.apmrc</code>文件<br>加入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strict-ssl=false</span><br><span class="line">http_proxy=socks5:127.0.0.1:1080</span><br><span class="line">https_proxy=socks5:127.0.0.1:1080</span><br></pre></td></tr></table></figure><h4 id="方法二-使用国内-npm-源"><a href="#方法二-使用国内-npm-源" class="headerlink" title="方法二:使用国内 npm 源"></a>方法二:使用国内 npm 源</h4>编辑 <code>~/.atom/.apmrc</code>，添加<code>registry = https://registry.npm.taobao.org </code>即可<h4 id="方法三-使用proxychains-ng绑socks代理，然后用apm命令安装-atom插件"><a href="#方法三-使用proxychains-ng绑socks代理，然后用apm命令安装-atom插件" class="headerlink" title="方法三:使用proxychains-ng绑socks代理，然后用apm命令安装 atom插件"></a>方法三:使用<code>proxychains-ng</code>绑<code>socks</code>代理，然后用<code>apm</code>命令安装 <code>atom</code>插件</h4>适用于MacOS和Linux，另外也可以使用polipo，Windows可以使用Proxifier、3proxy<br><code>proxychains-ng</code>项目地址<a href="https://github.com/rofl0r/proxychains-ng">proxychains-ng</a><br>Github下载安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rofl0r/proxychains-ng</span><br><span class="line">cd proxychains-ng</span><br><span class="line">./configure</span><br><span class="line">sudo make &amp;&amp; make install</span><br></pre></td></tr></table></figure>ProxyChains 的配置文件位于 /etc/proxychains.conf ，打开后你需要在末尾添加你使用的代理。例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line"># add proxy here ...</span><br><span class="line"># meanwile</span><br><span class="line"># defaults set to &quot;tor&quot;</span><br><span class="line">#socks4    127.0.0.1 9050</span><br><span class="line"> </span><br><span class="line"># example</span><br><span class="line">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure>ProxyChains 的使用方式非常简单，直接在应用程序前加上 proxychains4 即可。例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 git clone https://github.com/rofl0r/proxychains-ng</span><br></pre></td></tr></table></figure><h5 id="3proxy"><a href="#3proxy" class="headerlink" title="3proxy"></a>3proxy</h5>官方主页:<a href="http://3proxy.ru/">http://3proxy.ru/</a><br>使用教程:<a href="https://blog.csdn.net/gsls200808/article/details/45275913">https://blog.csdn.net/gsls200808/article/details/45275913</a><h5 id="让Windows的CMD等程序能走代理"><a href="#让Windows的CMD等程序能走代理" class="headerlink" title="让Windows的CMD等程序能走代理"></a>让Windows的CMD等程序能走代理</h5>CMD等程序会通过<code>http_proxy</code> <code>https_proxy</code> <code>ftp_proxy</code>变量来请求代理，修改变量即可。<br>假设你已经使用了SS客户端，本地socks5代理为127.0.0.1:1080<br>在CMD窗口输入如下指令设置代理：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=socks5://127.0.0.1:1080</span><br><span class="line">set https_proxy=socks5://127.0.0.1:1080</span><br><span class="line">set ftp_proxy=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>可以通过<code>echo %http_proxy%</code>命令查看是否设置成功。<br>取消代理设置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=</span><br><span class="line">set https_proxy=</span><br></pre></td></tr></table></figure>这是临时的，重启命令行之后就没有了，可以写入环境变量中永远生效，另外也可以设置WinHTTP代理。</li></ul><h5 id="设置WinHTTP代理"><a href="#设置WinHTTP代理" class="headerlink" title="设置WinHTTP代理"></a>设置WinHTTP代理</h5><p>这个设置后永远生效<br>指定端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp set proxy 127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>或者令cmd使用ie中设置的代理(可以使用pac文件)，这一步之前需要改下IE的代理设置为全局，因为PAC列表中没有Github等网站。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp import proxy source=ie</span><br></pre></td></tr></table></figure><p>查看代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp show proxy</span><br></pre></td></tr></table></figure><p>取消代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp reset proxy</span><br></pre></td></tr></table></figure><h5 id="polipo的安装"><a href="#polipo的安装" class="headerlink" title="polipo的安装"></a>polipo的安装</h5><p>MAC OS和Linux下可以使用此方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install polipo</span><br></pre></td></tr></table></figure><p>编辑配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/polipo/config</span><br></pre></td></tr></table></figure><p>配置内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># This file only needs to list configuration variables that deviate</span><br><span class="line"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span><br><span class="line"># and &quot;polipo -v&quot; for variables you can tweak and further information.</span><br><span class="line"></span><br><span class="line">logSyslog = true</span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line"></span><br><span class="line">proxyAddress = &quot;0.0.0.0&quot;</span><br><span class="line"></span><br><span class="line">socksParentProxy = &quot;127.0.0.1:1080&quot;</span><br><span class="line">socksProxyType = socks5</span><br><span class="line"></span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line"></span><br><span class="line">dnsQueryIPv6 = no</span><br></pre></td></tr></table></figure><p>保存退出,重启polipo服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service polipo restart</span><br></pre></td></tr></table></figure><h5 id="启用polipo代理"><a href="#启用polipo代理" class="headerlink" title="启用polipo代理"></a>启用polipo代理</h5><p>通过 service polipo status 命令，我们可以看到新的监听端口为<strong>8123</strong>。<br><img src="https://images.liangs.me/notes/Notes/_image/7a761377ce91b9ff5b08c62780ab3e4c_1460000013587471_w%3D549%26h%3D193.jpg"><br>因此，Linux终端启用代理的命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:8123</span><br><span class="line">export https_proxy=http://127.0.0.1:8123</span><br><span class="line">export ftp_proxy=http://127.0.0.1:8123</span><br><span class="line">export no_proxy=&#x27;127.0.0.1&#x27;</span><br></pre></td></tr></table></figure><p>同样，直接输入上述命令设置的代理也是临时的。一个比较实用的方法是在~/.bashrc文件中设置环境，之后就不需要再手动设置了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure><p>在文件最后插入上述三条指令，保存。<br>这里要加上<code>export no_proxy=&#39;127.0.0.1&#39;</code>是因为腾讯云阿里云等软件的源在内网，防止设置代理后访问不了软件源，从而无法安装软件。<br>测试 wget 指令：<br><img src="https://images.liangs.me/notes/Notes/_image/a65ec23e88eb5aefcfc9bb16f484a6e5_1028233383-5a9fca83cc525_articlex.jpg"></p><h3 id="方法四-使用VPN全局翻墙"><a href="#方法四-使用VPN全局翻墙" class="headerlink" title="方法四:使用VPN全局翻墙"></a>方法四:使用VPN全局翻墙</h3><p>这里不赘述了</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>新建文件，后缀名为<code>.tex</code>，编码为<code>UTF-8</code><br>测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;article&#125;</span><br><span class="line">\author &#123;Author&#125;</span><br><span class="line">\title &#123;Title&#125;</span><br><span class="line">\usepackage&#123;ctex&#125;</span><br><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line">\usepackage&#123;amssymb&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line">\section&#123;First section&#125; test1.</span><br><span class="line">    \subsection&#123;First subsection&#125; test2.</span><br><span class="line">        \subsubsection&#123;First double subsection&#125;</span><br><span class="line">            \paragraph&#123;Fist paragraph&#125; test3.</span><br><span class="line">                \subparagraph&#123;First subparagraph&#125; test4.</span><br><span class="line">    \subsection&#123;Second subsection&#125;</span><br><span class="line">        \paragraph&#123;段落&#125; 中文测试。</span><br><span class="line">\\</span><br><span class="line">Hello World! \\ % This is comment</span><br><span class="line">Hello \LaTeX ! \\</span><br><span class="line"> </span><br><span class="line">$\lim\limits_&#123;n \rightarrow +\infty&#125; P\lbrace\frac&#123;\sum\limits_&#123;i=1&#125;&#123;n&#125;Xi - n\cdot EX&#125;&#123; \sqrt&#123;n \cdot DX&#125; &#125;  \leqslant x\rbrace = \Phi(x)$ \\</span><br><span class="line"> </span><br><span class="line">$P\lbrace a&lt;X&lt;b \rbrace \approx \Phi(\frac&#123;b - n\cdot EX&#125;&#123;\sqrt &#123;n\cdot DX&#125;&#125;) - \Phi(\frac&#123;a - n\cdot EX&#125;&#123;\sqrt&#123;n\cdot DX&#125; &#125;)$ \\</span><br><span class="line"> </span><br><span class="line">$F(x,y) = F_&#123;X&#125;(x)F_&#123;Y&#125;(y)$</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>按<code>Ctrl + Alt + B</code> 生成PDF文档，右侧会自动弹出PDF预览页面，重新编译后会更新预览。</p><h3 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h3><ul><li><code>Ctrl + \</code> :隐藏/展示左边的目录树</li><li><code>Alt+Shift+S</code>: 搜索latex片段</li><li><code>Alt+Ctrl+B</code>: 编译</li><li><code>Alt+Ctrl+S</code>: 编辑的位置会同步到右侧预览以黄点显示</li><li><code>Alt+Ctrl+C</code>: 清除生成的文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这套方案比用WinEdt和TexStudio好，编译的速度快，并且支持PDF实时预览。&lt;/p&gt;
&lt;h2 id=&quot;软件下载及安装&quot;&gt;&lt;a href=&quot;#软件下载及安装&quot; class=&quot;headerlink&quot; title=&quot;软件下载及安装&quot;&gt;&lt;/a&gt;软件下载及安装&lt;/h2&gt;&lt;h3 id=&quot;TeX-Live&quot;&gt;&lt;a href=&quot;#TeX-Live&quot; class=&quot;headerlink&quot; title=&quot;TeX Live&quot;&gt;&lt;/a&gt;TeX Live&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://tug.org/texlive/acquire-netinstall.html&quot;&gt;官方源&lt;/a&gt;&lt;br&gt;个人推荐使用清华的镜像，会快很多&lt;br&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/&quot;&gt;清华的TUNA镜像&lt;/a&gt;&lt;br&gt;剩下的就是图形化安装了，不赘述，遇到问题百度下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内网穿透</title>
    <link href="https://www.zhiiker.com/2018/11/03/%E7%AC%94%E8%AE%B0/2018-11-03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://www.zhiiker.com/2018/11/03/笔记/2018-11-03.内网穿透/</id>
    <published>2018-11-02T16:00:00.000Z</published>
    <updated>2018-12-30T10:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>想试下内网穿透，尝试后发现，采用阿里云和腾讯云DDNS都会失败，因为没有公网IP，移动是个大内网。<br>需要有个带公网IP的服务器，用ngrok或者frps进行流量转发<br>试了试ngrok，在路由器上仍不好用，并且局限较大。<br>最后采用了frps<br>服务器搭建借鉴了这篇文章，这篇文章使用的脚本功能齐全相对好用<br><a href="https://note.izhaoo.com/frp-deploy.html">Frp部署 – 穿透内网，从外网访问内网设备</a></p><span id="more"></span><h2 id="服务端的安装"><a href="#服务端的安装" class="headerlink" title="服务端的安装"></a>服务端的安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/clangcn/onekey-install-shell/master/frps/install-frps.sh -O ./install-frps.sh    #下载脚本</span><br><span class="line">chmod 755 ./install-frps.sh    #赋予权限</span><br><span class="line">./install-frps.sh install    #安装脚本</span><br></pre></td></tr></table></figure><p>然后脚本开始运行，会让你输入一些配置，直接回车是默认配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Please input frps bind_port [1-65535](Default Server Port: 5443):[7000]</span><br><span class="line">#输入frp提供服务的端口，用于服务器端和客户端通信</span><br><span class="line"></span><br><span class="line">Please input frps vhost_http_port [1-65535](Default vhost_http_port: 80):[7080]</span><br><span class="line">#输入frp进行http穿透的http服务端口，建议修改防止冲突呀</span><br><span class="line"></span><br><span class="line">Please input frps vhost_https_port [1-65535](Default vhost_https_port: 443):[70443]</span><br><span class="line">#输入frp进行https穿透的https服务端口，建议修改防止冲突呀</span><br><span class="line"></span><br><span class="line">Please input frps dashboard_port [1-65535](Default dashboard_port: 6443):[7081]</span><br><span class="line">#输入frp的控制台服务端口，用于查看frp工作状态</span><br><span class="line"></span><br><span class="line">Please input dashboard_user (Default: admin):[admin]</span><br><span class="line">#登录控制台的用户名</span><br><span class="line"></span><br><span class="line">Please input dashboard_pwd (Default: kpkpM7VZ):[admin]</span><br><span class="line">#登录控制台的密码</span><br><span class="line"></span><br><span class="line">Please input privilege_token (Default: 9m2UAOWa6hx5Eise):[admin]</span><br><span class="line">#Frp服务端和客户端的通信密码</span><br><span class="line"></span><br><span class="line">下面的内容都是默认即可</span><br></pre></td></tr></table></figure><p>到此服务端安装完成。<br><img src="https://images.liangs.me/notes/Notes/_image/aea9760659742daa86bf1b6b0c2c3873_20180512114749.jpg"><br>综上可知，服务端配置如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line">subdomain_host = ddns.example.com   #后面加的，配置域名</span><br><span class="line">kcp_bind_port = 7000</span><br><span class="line">dashboard_port = 7081</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line">vhost_http_port = 7080</span><br><span class="line">vhost_https_port = 70443</span><br><span class="line">log_file = ./frps.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line">privilege_token = admin</span><br><span class="line">max_pool_count = 50</span><br><span class="line">tcp_mux = true</span><br></pre></td></tr></table></figure><p>之后需要修改解析，后来就是这个地方出问题，一直没成功。<br>如果你用来做ddns的域名为<code>ddns.example.com</code>那么需要添加两个A解析，分别将<code>ddns.example.com</code>和<code>*.ddns.example.com</code>解析到服务器的IP。<br>之后就是Padavan路由器的设置了，脚本一直运行不成功。<br>参考这篇文章使用的脚本解决了问题<br><a href="https://www.imokey.cn/2018/10/frp&padavan_tutorial/">Padavan路由器设置frp内网穿透实现外网访问路由器管理页面+外网远程访问内网下的Windows桌面</a><br>这篇文章有更详细的配置<br><a href="https://lolico.moe/tutorial/frp.html">[frp] 内网穿透神器搭建 萌新也看得懂的教程系列</a><br>我的脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">export PATH=&#x27;/etc/storage/bin:/tmp/script:/etc/storage/script:/opt/usr/sbin:/opt/usr/bin:/opt/sbin:/opt/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin&#x27;</span><br><span class="line">export LD_LIBRARY_PATH=/lib:/opt/lib</span><br><span class="line">killall frpc frps</span><br><span class="line">mkdir -p /tmp/frp</span><br><span class="line"></span><br><span class="line">#启动frp功能后会运行以下脚本</span><br><span class="line">#使用方法请查看论坛教程地址: http://www.right.com.cn/forum/thread-191839-1-1.html</span><br><span class="line">#frp项目地址教程: https://github.com/fatedier/frp/blob/master/README_zh.md</span><br><span class="line">#请自行修改 auth_token 用于对客户端连接进行身份验证</span><br><span class="line"># IP查询： http://119.29.29.29/d?dn=github.com</span><br><span class="line"></span><br><span class="line">#客户端配置：</span><br><span class="line">cat &gt; &quot;/tmp/frp/myfrpc.ini&quot; &lt;&lt;-\EOF</span><br><span class="line">[common]</span><br><span class="line">server_addr =******</span><br><span class="line">server_port = 7000</span><br><span class="line">token = admin</span><br><span class="line"></span><br><span class="line">#ssh配置</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = ******</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 5200</span><br><span class="line"></span><br><span class="line">[web-dev]</span><br><span class="line">type = http</span><br><span class="line">local_ip = ******</span><br><span class="line">local_port = 4000</span><br><span class="line">subdomain = t</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_ip = ******</span><br><span class="line">local_port = 80</span><br><span class="line">subdomain = r</span><br><span class="line">#假设此项设置为 :router，前面的服务端配置frps.ini时</span><br><span class="line">#将subdomain_host设置为example.com，然后你将</span><br><span class="line">#r.example.com解析到服务端后，可以使用r.example.com:7080</span><br><span class="line">#来访问路由器管理页面。</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#启动：</span><br><span class="line">frpc_enable=`nvram get frpc_enable`</span><br><span class="line">frpc_enable=$&#123;frpc_enable:-&quot;0&quot;&#125;</span><br><span class="line">frps_enable=`nvram get frps_enable`</span><br><span class="line">frps_enable=$&#123;frps_enable:-&quot;0&quot;&#125;</span><br><span class="line">if [ &quot;$frpc_enable&quot; = &quot;1&quot; ] ; then</span><br><span class="line">    frpc -c /tmp/frp/myfrpc.ini &amp;</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$frps_enable&quot; = &quot;1&quot; ] ; then</span><br><span class="line">    frps -c /tmp/frp/myfrps.ini &amp;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="FTP内网穿透"><a href="#FTP内网穿透" class="headerlink" title="FTP内网穿透"></a>FTP内网穿透</h2><p><a href="http://www.right.com.cn/forum//forum.php?mod=viewthread&tid=332648">Frp 内网穿透 FTP教程 Padavan By Geekman</a></p><p><a href="http://www.right.com.cn/forum/thread-332617-1-1.html">关于 Frp 配置文件的一些说明</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>发现很好的论坛<br><a href="http://koolshare.cn/">koolshare</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想试下内网穿透，尝试后发现，采用阿里云和腾讯云DDNS都会失败，因为没有公网IP，移动是个大内网。&lt;br&gt;需要有个带公网IP的服务器，用ngrok或者frps进行流量转发&lt;br&gt;试了试ngrok，在路由器上仍不好用，并且局限较大。&lt;br&gt;最后采用了frps&lt;br&gt;服务器搭建借鉴了这篇文章，这篇文章使用的脚本功能齐全相对好用&lt;br&gt;&lt;a href=&quot;https://note.izhaoo.com/frp-deploy.html&quot;&gt;Frp部署 – 穿透内网，从外网访问内网设备&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新的名号—象罔卮人(卮客)</title>
    <link href="https://www.zhiiker.com/2018/08/11/%E7%BB%93%E7%BB%B3%E7%BA%AA/2018-08-11.%E6%96%B0%E7%9A%84%E5%90%8D%E5%AD%97%E2%80%94%E8%B1%A1%E7%BD%94%E5%8D%AE%E4%BA%BA/"/>
    <id>https://www.zhiiker.com/2018/08/11/结绳纪/2018-08-11.新的名字—象罔卮人/</id>
    <published>2018-08-10T22:13:00.000Z</published>
    <updated>2019-07-12T08:23:01.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="象罔"><a href="#象罔" class="headerlink" title="象罔"></a>象罔</h2><p>“象罔”亦作”象网”。《庄子》寓言中的人物。含无心﹑无形迹之意。</p><blockquote><p>《庄子．天地》:”黄帝游乎赤水之北，登乎昆仑之丘而南望，还归，遗其玄珠。使知索之而不得，使离朱索之而不得，使吃诟索之而不得也。乃使象罔，象罔得之。</p></blockquote><span id="more"></span><p>文中的“知”、“离朱”、“吃诟”及“象罔”，即代表四种人物：一种是最有智慧的人，一种是眼光最锐利的人，一种是最擅于辩论的人，另外一种则是浑浑噩噩、蒙蒙懂懂，毫无机心的人；至于皇帝遗失的”玄珠“，则是暗寓自然界中的“道”。《庄子》的〈天地〉篇，主旨在说明“道本于自然”：它无法靠“智慧”去求得，也无法靠“一对锐利的双眼”去求得，更无法凭借“滔滔雄辩”去求得；它是无所不在的，却无法用肉眼去看、无法用手去触摸。最后能发现“道”的人，竟然就是那个“绝圣弃智”的“象罔”。</p><p>吕惠卿注：</p><blockquote><p>“象则非无，罔则非有，不皎不昧，玄珠之所以得也”（吕惠卿《庄子义》）</p></blockquote><p>非有非无也是佛家学的第三谛、终极境界——空性。</p><h2 id="卮人"><a href="#卮人" class="headerlink" title="卮人"></a>卮人</h2><p>卮，是一种酒器，卮器满了，自然向外流溢。庄子以卮言来比喻那种没有人为预谋的，自然流露的合乎天性的心声。卮人就是合乎自然的人。</p><h2 id="象罔卮人"><a href="#象罔卮人" class="headerlink" title="象罔卮人"></a>象罔卮人</h2><p>总的来说这个名号就是探索真理的明珠，做一个合乎自然的人。</p><h2 id="卮客"><a href="#卮客" class="headerlink" title="卮客"></a>卮客</h2><p>觉得还是有些过于冗长，就想了个精简版的名号——<code>卮客</code>。<br><code>客</code>代表漂泊的旅客，并且连起来还和<code>geek</code>谐音。</p><p>卮和客都有谦虚的意味，</p><blockquote><p>卮言：支离而无统绪或随人妄言，既无主见，也无立场的、随和人意的言论。</p></blockquote><blockquote><p>卮辞：随和人意，无主见之词。</p></blockquote><p>卮客内涵又是切合道合乎自然平凡的人，平凡中见不凡。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;象罔&quot;&gt;&lt;a href=&quot;#象罔&quot; class=&quot;headerlink&quot; title=&quot;象罔&quot;&gt;&lt;/a&gt;象罔&lt;/h2&gt;&lt;p&gt;“象罔”亦作”象网”。《庄子》寓言中的人物。含无心﹑无形迹之意。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《庄子．天地》:”黄帝游乎赤水之北，登乎昆仑之丘而南望，还归，遗其玄珠。使知索之而不得，使离朱索之而不得，使吃诟索之而不得也。乃使象罔，象罔得之。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="卮客" scheme="https://www.zhiiker.com/tags/%E5%8D%AE%E5%AE%A2/"/>
    
      <category term="名号" scheme="https://www.zhiiker.com/tags/%E5%90%8D%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>配置IPython Notebook提供非本地访问</title>
    <link href="https://www.zhiiker.com/2018/08/07/%E7%AC%94%E8%AE%B0/2018-08-07.%E9%85%8D%E7%BD%AEIPython%20Notebook%E6%8F%90%E4%BE%9B%E9%9D%9E%E6%9C%AC%E5%9C%B0%E8%AE%BF%E9%97%AE/"/>
    <id>https://www.zhiiker.com/2018/08/07/笔记/2018-08-07.配置IPython Notebook提供非本地访问/</id>
    <published>2018-08-06T17:24:21.000Z</published>
    <updated>2018-08-06T17:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SSL-password验证"><a href="#SSL-password验证" class="headerlink" title="SSL+password验证"></a>SSL+password验证</h2><p>进入3.5.1环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv activate env351</span><br></pre></td></tr></table></figure><p>1.生成配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><span id="more"></span><p>2.生成密码<br>输入<code>ipython</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from notebook.auth import passwd</span><br><span class="line">In [2]: passwd()</span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br><span class="line">Out[2]: &#x27;sha1:.........&#x27;</span><br></pre></td></tr></table></figure><p>记下这里的sha1值，后面有用<br>3.生成ssl证书<br>输入<code>exit</code>退出命令模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.jupyter</span><br><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mykey.key -out mycert.pem</span><br></pre></td></tr></table></figure><p>生成证书时按要求输入信息即可<br>4.修改配置文件<code>jupyter_notebook_config.py</code><br>注意官方文档说需要ssl才能打开外部访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.base_url = &#x27;/ipython/&#x27;  --制定url的path,默认是根目录</span><br><span class="line">c.NotebookApp.password = u&#x27;sha1:.....&#x27;  --注意和生成的配套</span><br><span class="line">c.NotebookApp.ip = &#x27;*&#x27;  --目前没找到制定网段的方法</span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line">c.NotebookApp.certfile = &#x27;/root/.jupyter/mycert.pem&#x27;</span><br><span class="line">c.NotebookApp.keyfile = &#x27;/root/.jupyter/mykey.key&#x27;</span><br></pre></td></tr></table></figure><p>5.启动并访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook </span><br></pre></td></tr></table></figure><p>浏览器输入地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://host:8888/ipython/tree#notebooks</span><br></pre></td></tr></table></figure><p><img src="https://images.liangs.me/bitcron/Notes/_image/QQ%E6%88%AA%E5%9B%BE20180807011038.png"></p><h2 id="Nginx-password验证方式"><a href="#Nginx-password验证方式" class="headerlink" title="Nginx+password验证方式"></a>Nginx+password验证方式</h2><p>1.生成配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>2.修改配置文件jupyter_notebook_config.py，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.base_url = &#x27;/ipython/&#x27;  --制定url的path,默认是根目录</span><br><span class="line">c.NotebookApp.password = u&#x27;sha1:.....&#x27;  --注意和生成的配套</span><br><span class="line">c.NotebookApp.open_browser = False</span><br></pre></td></tr></table></figure><p>3.安装并配置Nginx<br>  注意 proxy_set的一些参数，这些是一定需要的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location /ipython &#123;</span><br><span class="line">     allow 192.168.1.0/24; #制定自己的网段即可</span><br><span class="line">     deny  all;</span><br><span class="line">     proxy_pass http://127.0.0.1:8888/;</span><br><span class="line">     proxy_http_version 1.1;</span><br><span class="line">     proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">     proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">     proxy_set_header Origin &quot;&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> 4.启动并访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook </span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://host:nginxport/ipython/tree#notebooks</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSL-password验证&quot;&gt;&lt;a href=&quot;#SSL-password验证&quot; class=&quot;headerlink&quot; title=&quot;SSL+password验证&quot;&gt;&lt;/a&gt;SSL+password验证&lt;/h2&gt;&lt;p&gt;进入3.5.1环境&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pyenv activate env351&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1.生成配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jupyter notebook --generate-config&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下安装pyenv、IPython  Notebook和科学计算包的过程总结</title>
    <link href="https://www.zhiiker.com/2018/08/07/%E7%AC%94%E8%AE%B0/2018-08-06.Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85pyenv%E3%80%81IPython%20Notebook%E5%92%8C%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%8C%85%E7%9A%84%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>https://www.zhiiker.com/2018/08/07/笔记/2018-08-06.Ubuntu下安装pyenv、IPython Notebook和科学计算包的过程总结/</id>
    <published>2018-08-06T17:24:14.000Z</published>
    <updated>2018-08-07T05:50:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.安装pip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo python get-pip.py</span><br></pre></td></tr></table></figure><p>2.如果没有装git，需要安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure><span id="more"></span><p>3.安装python需要依赖的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev</span><br></pre></td></tr></table></figure><p>4.安装配置pyenv到具体目录<br>本次安装都是用 /pythontest</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yyuu/pyenv.git /pythontest/.pyenv</span><br><span class="line">echo &#x27;export PYENV_ROOT=&quot;/pythontest/.pyenv&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;eval &quot;$(pyenv init -)&quot;&#x27; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>重启shell，使改动生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec $SHELL</span><br></pre></td></tr></table></figure><p>5.pyenv安装具体python版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 2.7.11 -v</span><br><span class="line">pyenv install 3.5.1 -v</span><br><span class="line">pyenv rehash</span><br><span class="line">pyenv versions</span><br></pre></td></tr></table></figure><p>6.安装pyenv-virtualenv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yyuu/pyenv-virtualenv.git /pythontest/.pyenv/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure><p>其中<code>/pythontest/.pyenv </code>是你安装pyenv的目录<br>如果https不能使用，使用以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/yyuu/pyenv-virtualenv.git /pythontest/.pyenv/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure><p>其中<code>/pythontest/.pyenv</code>是你安装pyenv的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec &quot;$SHELL&quot;</span><br></pre></td></tr></table></figure><p>重新加载shell,更新环境变量<br>7.创建3.5.1虚拟环境，所有都在这个环境下应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 3.5.1 env351</span><br></pre></td></tr></table></figure><p>激活env351</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv activate env351</span><br></pre></td></tr></table></figure><p>8.安装IPython所需依赖的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++</span><br></pre></td></tr></table></figure><p>9.安装IPython及 IPython Notebook<br><code>pip install IPython</code><br>遇到错误，查阅<a href="https://github.com/ipython/ipython/issues/10454">pip install error #10454</a>，运行<code>apt-get install python-dev</code><br>安装IPython Notebook的依赖<br><code>pip install urllib3</code><br>10.安装科学计算所需的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libfreetype6-dev</span><br><span class="line">sudo apt-get install gfortran</span><br><span class="line">sudo apt-get install libopenblas-dev liblapack-dev</span><br><span class="line">sudo apt-get install libpng12-0 libpng12-dev</span><br></pre></td></tr></table></figure><p>11.验证测试：<br>进入3.5.1环境，安装IPython Notebook</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv activate env351</span><br><span class="line">pip install jupyter`</span><br></pre></td></tr></table></figure><p>进入IPython notebook</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>退出3.5.1环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.安装pip&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo python get-pip.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.如果没有装git，需要安装&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人读书经历</title>
    <link href="https://www.zhiiker.com/2018/04/11/%E7%AC%94%E8%AE%B0/2018-04-11.%E4%B8%AA%E4%BA%BA%E8%AF%BB%E4%B9%A6%E7%BB%8F%E5%8E%86/"/>
    <id>https://www.zhiiker.com/2018/04/11/笔记/2018-04-11.个人读书经历/</id>
    <published>2018-04-11T15:38:04.000Z</published>
    <updated>2018-04-11T15:48:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自己读书频率不高，也经常掺杂一些没有营养的，但经年累月后却有了可观的质量和数量。<br>下面谈谈自己的读书经历，还有印象比较深的书。<br>刚开始读书的时候很艰难，没有相应的环境，探索很久才能够发现一本有深度让自己有体悟的书，所以真正让自己喜欢上读书是因为玄幻小说，只不过后来通宵看发现都是一个模式之后转向经典寻找自己的精神诉求。另外以前没有相应的交流媒介，如果有前辈指导你怎么读，读什么，或者有同好分享书单和见解，那就能很快入门。不过后来随着网络信息渠道越来越便利，自己社交圈越来越广，知识越来越普及化，还有很多知识中介的出现——罗辑思维等付费知识平台、翻转电台等通识性节目，降低了知识获取的门槛（当然，也阻碍了人们思维的深度），读书也容易了许多。</p><span id="more"></span><p>计算机方面，在学校读的最多的就是教材，为了考试而读书，是一种灌输，毫无享受，能够达到掌握技能的程度已经不错了，别提真正能有什么心得，产生自己的见解。真正让自己对计算机有了认识的是计算机入门三宝书：《SICP》《CSAPP》《CLRS》。另外《黑客与画家》很多思想到现在也不过时。<br>最早对自己有影响的书可能是《老子怎样说》，也是第一次对道家思想有了了解，当时身上有种种压力也有心结，但是读那本书的时候，觉得念头通达，精神都升华了，道家的一些理念也越来越对自己的路子。不过再往后读道家、道教的东西却没有什么收获，后来通过荣格、梭罗的书从侧面体悟到了道教思想的真意，用没有偏见的眼光去审视炼丹术等内涵，明白了其中真正的价值。<br>高中学政治的时候接触的康德 ，生生的啃完了《纯粹理性批判》，虽然没看懂多少也有些许共鸣，后来逛豆瓣的时候发现了邓晓芒《纯粹理性批判指要》这本书，开始真正读懂了《纯粹理性批判》，有一种极大的解放感：一方面世界是被决定的，一方面人是有自由的，人是自由的，我们可以自由地创造新世界，人可以超出任何束缚。<br>之后相信某种基于复杂性理论的决定论的，信仰“万物可计算”、“万物源于比特”，大概是读了《未来简史》、《终极算法》之类的书让自己有这种世界观。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己读书频率不高，也经常掺杂一些没有营养的，但经年累月后却有了可观的质量和数量。&lt;br&gt;下面谈谈自己的读书经历，还有印象比较深的书。&lt;br&gt;刚开始读书的时候很艰难，没有相应的环境，探索很久才能够发现一本有深度让自己有体悟的书，所以真正让自己喜欢上读书是因为玄幻小说，只不过后来通宵看发现都是一个模式之后转向经典寻找自己的精神诉求。另外以前没有相应的交流媒介，如果有前辈指导你怎么读，读什么，或者有同好分享书单和见解，那就能很快入门。不过后来随着网络信息渠道越来越便利，自己社交圈越来越广，知识越来越普及化，还有很多知识中介的出现——罗辑思维等付费知识平台、翻转电台等通识性节目，降低了知识获取的门槛（当然，也阻碍了人们思维的深度），读书也容易了许多。&lt;/p&gt;
    
    </summary>
    
      <category term="结绳纪" scheme="https://www.zhiiker.com/categories/%E7%BB%93%E7%BB%B3%E7%BA%AA/"/>
    
    
      <category term="读书" scheme="https://www.zhiiker.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>同时把代码提交到两个git代码托管的服务器上</title>
    <link href="https://www.zhiiker.com/2017/08/02/%E7%AC%94%E8%AE%B0/2017-08-02.%E5%90%8C%E6%97%B6%E6%8A%8A%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%A4%E4%B8%AAgit%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
    <id>https://www.zhiiker.com/2017/08/02/笔记/2017-08-02.同时把代码提交到两个git代码托管的服务器上/</id>
    <published>2017-08-02T11:35:30.000Z</published>
    <updated>2018-04-11T15:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin xxx </span><br><span class="line">git remote add another yyy </span><br><span class="line">git push origin master </span><br><span class="line">git push another master </span><br></pre></td></tr></table></figure><span id="more"></span><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .git/config </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;] </span><br><span class="line">url = ssh://server.example.org/home/ams/website.git </span><br><span class="line">url = ssh://other.exaple.org/home/foo/website.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin xxx &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add another yyy &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push another master &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://www.zhiiker.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用cpuminer在Linux环境下用CPU挖矿</title>
    <link href="https://www.zhiiker.com/2017/08/01/%E7%AC%94%E8%AE%B0/2017-08-01.%E4%BD%BF%E7%94%A8cpuminer%E5%9C%A8Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%94%A8CPU%E6%8C%96%E7%9F%BF/"/>
    <id>https://www.zhiiker.com/2017/08/01/笔记/2017-08-01.使用cpuminer在Linux环境下用CPU挖矿/</id>
    <published>2017-08-01T11:35:30.000Z</published>
    <updated>2018-11-25T16:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>先到<a href="https://minergate.com/">MinerGate</a>注册账号，然后到<code>https://minergate.com/altminers/cpuminer-multi-wolf</code>，就可以看到分配到的采矿地址，但是有了挖矿路径，怎么挖呢？</p><span id="more"></span><h2 id="挖矿工具"><a href="#挖矿工具" class="headerlink" title="挖矿工具"></a>挖矿工具</h2><p>这里推荐 tpruvot/cpuminer-multi 作为 CPU 挖矿的工具，MinerGate 推荐的是 OhGodAPet/cpuminer-multi ，不过我觉得前者更新的更勤快，说不定有优化挖矿细节提高效率呢。<br>为什么用命令行而不是 GUI 挖矿的呢？挖矿就是高效利用资源嘛，有显示器这不是铺张浪费嘛！！</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里以 Ubuntu 64bit 16.04LTS 编译为例<br>1.安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential automake autoconf pkg-config libcurl4-openssl-dev libjansson-dev libssl-dev libgmp-dev make g++ git screen</span><br></pre></td></tr></table></figure><p>2.下载源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tpruvot/cpuminer-multi.git</span><br></pre></td></tr></table></figure><p>3.编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cpuminer-multi</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><h2 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h2><p>到<code>https://minergate.com/altminers/cpuminer-multi-wolf</code>链接里提供的命令<code>minerd</code>改成<code>./cpuminer</code>即可。</p><p><img src="https://images.liangs.me/bitcron/Notes/_image/258be978cad2703fee9432c98c65c824_mv1xs.png"></p><p>为了保证关闭 SSH 终端后，脚本还会继续运行，需要在之前运行 screen 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S miner</span><br></pre></td></tr></table></figure><p>例如，我选择挖 BCN（比特币），原来的代码是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minerd -a cryptonight -o stratum+tcp://bcn.pool.minergate.com:45550 -u YOUR_Email@www.mf8.biz -p x</span><br></pre></td></tr></table></figure><p>那么完整的流程就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cpuminer-multi</span><br><span class="line">screen -S miner</span><br><span class="line">./cpuminer -a cryptonight -o stratum+tcp://bcn.pool.minergate.com:45550 -u YOUR_Email@www.mf8.biz -p x</span><br></pre></td></tr></table></figure><p>这就是挖矿过程的截图：<br><img src="https://images.liangs.me/bitcron/Notes/_image/82c48ffc78994c115adb995301743ba5_e5390.jpg"><br>点击<a href="https://minergate.com/">MinerGate</a>网站这个位置可以看到挖矿的情况<br><img src="https://images.liangs.me/bitcron/Notes/_image/2017-08-01-19-46-38.jpg"><br>挖了老半天的收益，所以还是得靠 A卡 用GPU挖矿啊，CPU挖矿还是不行的，不过确实是把闲置的CPU算力运用起来的好方法。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>screen参数说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-A 　将所有的视窗都调整为目前终端机的大小。</span><br><span class="line">-d &lt;作业名称&gt; 　将指定的screen作业离线。</span><br><span class="line">-h &lt;行数&gt; 　指定视窗的缓冲区行数。</span><br><span class="line">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span><br><span class="line">-r &lt;作业名称&gt; 　恢复离线的screen作业。</span><br><span class="line">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span><br><span class="line">-s 　指定建立新视窗时，所要执行的shell。</span><br><span class="line">-S &lt;作业名称&gt; 　指定screen作业的名称。</span><br><span class="line">-v 　显示版本信息。</span><br><span class="line">-x 　恢复之前离线的screen作业。</span><br><span class="line">-ls或--list 　显示目前所有的screen作业。</span><br><span class="line">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span><br></pre></td></tr></table></figure><h2 id="挖矿软件下载地址"><a href="#挖矿软件下载地址" class="headerlink" title="挖矿软件下载地址"></a>挖矿软件下载地址</h2><p>Windows 64bit:<br><a href="https://minergate.com/download/win">https://minergate.com/download/win</a></p><p>Windows 32bit:<br><a href="https://minergate.com/download/win32">https://minergate.com/download/win32</a></p><p>Ubuntu 16.04 64bit or later(推荐挖矿速度较快):<br><a href="https://minergate.com/download/ubuntu">https://minergate.com/download/ubuntu</a></p><p>Ubuntu 14.xx 15.xx 64bit:<br><a href="https://minergate.com/download/deb">https://minergate.com/download/deb</a></p><p>Mac os(不推):<br><a href="https://minergate.com/download/mac">https://minergate.com/download/mac</a></p><p>Android(极慢但如果有空闲手机放着也是躺着赚，我自己两台android跑大概15~25H/s):<br><a href="https://play.google.com/store/apps/details?id=com.minergate.miner">https://play.google.com/store/apps/details?id=com.minergate.miner</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注册账号&quot;&gt;&lt;a href=&quot;#注册账号&quot; class=&quot;headerlink&quot; title=&quot;注册账号&quot;&gt;&lt;/a&gt;注册账号&lt;/h2&gt;&lt;p&gt;先到&lt;a href=&quot;https://minergate.com/&quot;&gt;MinerGate&lt;/a&gt;注册账号，然后到&lt;code&gt;https://minergate.com/altminers/cpuminer-multi-wolf&lt;/code&gt;，就可以看到分配到的采矿地址，但是有了挖矿路径，怎么挖呢？&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.zhiiker.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="区块链" scheme="https://www.zhiiker.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="CPU" scheme="https://www.zhiiker.com/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>解决Hexo deploy失败</title>
    <link href="https://www.zhiiker.com/2017/07/27/%E7%AC%94%E8%AE%B0/2017-07-27.%E8%A7%A3%E5%86%B3Hexo%20deploy%E5%A4%B1%E8%B4%A5/"/>
    <id>https://www.zhiiker.com/2017/07/27/笔记/2017-07-27.解决Hexo deploy失败/</id>
    <published>2017-07-26T16:00:00.000Z</published>
    <updated>2018-11-19T10:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hexo使用<code>hexo d</code><br>出现以下错误</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(node:2616) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">fatal: Not a git repository (or any of the parent directories): .git</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: fatal: Not a git repository (or any of the parent directories): .git</span><br><span class="line"></span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (A:\hexo\node_modules\hexo-util\lib\spawn.js:37:17)</span><br><span class="line">    at emitTwo (events.js:125:13)</span><br><span class="line">    at ChildProcess.emit (events.js:213:7)</span><br><span class="line">    at ChildProcess.cp.emit (A:\hexo\node_modules\cross-spawn\lib\enoent.js:40:29)</span><br><span class="line">    at maybeClose (internal/child_process.js:897:16)</span><br><span class="line">    at Socket.stream.socket.on (internal/child_process.js:340:11)</span><br><span class="line">    at emitOne (events.js:115:13)</span><br><span class="line">    at Socket.emit (events.js:210:7)</span><br></pre></td></tr></table></figure><p>删掉根目录下的文件夹：.deploy_git，重新deploy就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo使用&lt;code&gt;hexo d&lt;/code&gt;&lt;br&gt;出现以下错误&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.zhiiker.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="https://www.zhiiker.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Dropbox + VPS + Incrond+Hexo搭建博客小记</title>
    <link href="https://www.zhiiker.com/2017/07/19/%E7%AC%94%E8%AE%B0/2017-07-19.Dropbox%20+%20VPS%20+%20Incrond+Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/"/>
    <id>https://www.zhiiker.com/2017/07/19/笔记/2017-07-19.Dropbox + VPS + Incrond+Hexo搭建博客小记/</id>
    <published>2017-07-19T10:03:23.000Z</published>
    <updated>2018-12-08T10:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-17-16-56-13.jpg"></p><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><ol><li>首先登陆vps需要执行如下命令更新各种依赖</li><li>为防止机器没有安装epel，先安装epel(必须安装)</li></ol><ul><li>升级 CentOs 内核 <code>yum -y update</code></li><li>安装 Git <code>yum install git-core</code><span id="more"></span>导入key<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import http://download-i2.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6</span><br></pre></td></tr></table></figure>安装epel，分别是32位和64位<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://download-i2.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</span><br><span class="line">rpm -Uvh http://download-i2.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>然后安装yum-priorities<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install yum-priorities -y</span><br></pre></td></tr></table></figure>安装好后用命令看下，如果成功的话输出内容里有epel字样<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>安装Node.js<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br><span class="line">sudo yum install npm --enablerepo=epel</span><br></pre></td></tr></table></figure><h2 id="安装Dropbox"><a href="#安装Dropbox" class="headerlink" title="安装Dropbox"></a>安装Dropbox</h2></li><li>网上给出的教程试了好几次都有问题，自己搜到了正确的姿势<br>参考说明:<a href="http://www.dropboxwiki.com/tips-and-tricks/install-dropbox-in-an-entirely-text-based-linux-environment">nstall Dropbox In An Entirely Text-Based Linux Environment</a><br>安装代码如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">32位</span><br><span class="line">wget -O dropbox.tar.gz &quot;http://www.dropbox.com/download/?plat=lnx.x86&quot;</span><br><span class="line">64位</span><br><span class="line">wget https://clientupdates.dropboxstatic.com/dbx-releng/client/dropbox-lnx.x86_64-30.4.22.tar.gz</span><br><span class="line">tar -xvzf dropbox-lnx.x86_64-30.4.22.tar.gz</span><br></pre></td></tr></table></figure>然后执行，登录Dropbox的账号。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.dropbox-dist/dropboxd</span><br></pre></td></tr></table></figure>首次打开需要你验证账户。选择有右键复制上面一段，浏览器打开，登录你的Dropbox账号，授权这台机器参与你的网盘同步，关联成功会出现如下画面，Ctrl+C一下<br><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-16-21-05.jpg"></li></ol><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-16-24-40.jpg"></p><p>注意：进入连接后，一定要等刷新完毕后再点，并且不能结束终端，等到关联成功的消息。</p><h3 id="Dropbox使用"><a href="#Dropbox使用" class="headerlink" title="Dropbox使用"></a>Dropbox使用</h3><p>切换到dropbox.py脚本所在位置<br>查看dropbox 工作状态<code>./dropbox.py status</code><br>开始同步 <code>./dropbox.py start</code><br>停止同步 <code>./dropbox.py stop</code><br>帮助 <code>./dropbox.py exclude help</code></p><h4 id="选择性同步文件夹"><a href="#选择性同步文件夹" class="headerlink" title="选择性同步文件夹"></a>选择性同步文件夹</h4><p>例如你不需要同步<code>Dropbox/books/</code>目录，进入Dropbox目录<code>cd ~/Dropbox</code>，运行exclude来排除books目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dropboxy.py exclude add books #当前目录最好在Dropbox</span><br></pre></td></tr></table></figure><p>更多不需要同步的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dropboxy.py exclude add book photos Public Documents #排除Dropbox目录下books, photos, Public, Documents等目录</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ol><li>在刚才上面的结束之后 ls一下看看<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]# ls</span><br><span class="line">Dropbox  dropbox.tar.gz----这行是结果  别执行</span><br></pre></td></tr></table></figure></li><li>切进去Dropbox目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Dropbox</span><br></pre></td></tr></table></figure></li><li>接下来创建博客的目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line">cd hexo</span><br></pre></td></tr></table></figure></li><li>开始正式安装hexo<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g   网上教程里的很多命令在256或者128内存下全部是坑，因为内存关系安装不了</span><br><span class="line">hexo init        初始化hexo的意思</span><br><span class="line">hexo generate    可缩写为：hexo g</span><br><span class="line">hexo server     可缩写为：hexo s</span><br></pre></td></tr></table></figure>这时端口4000被打开了，我们能过浏览器打开地址，http://&lt;服务器ip&gt;:4000/.    访问测试一下看能不能看到首页，如果看不到或者结果不是OK，请排查错误。</li></ol><p>添加防火墙例外</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 4000 -j ACCEPT</span><br></pre></td></tr></table></figure><p>或直接关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 临时生效，重启后复原</span><br><span class="line">开启： service iptables start</span><br><span class="line">关闭： service iptables stop</span><br><span class="line"> </span><br><span class="line">永久性生效，重启后不会复原</span><br><span class="line">开启： chkconfig iptables on</span><br><span class="line">关闭： chkconfig iptables off</span><br></pre></td></tr></table></figure><p>这个时候可以去你的Dropbox网盘里看看有没有hexo目录，并且目录结构如下</p><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-16-29-41.jpg"></p><ul><li>下载Dropbox官方提供的一个用于管理的 Python 脚本 <code>wget https://linux.dropbox.com/packages/dropbox.py</code> 所有命令可以点击<a href="https://www.dropbox.com/help/desktop-web/linux-commands">这里</a>查看</li><li>增加这个脚本的权限 <code>chmod +x ./dropbox.py</code></li><li>加入到自启动 <code>./dropbox.py autostart y</code>然而实际测试发现这个在重启后 root 用户登录后没有自动启动，需要手动登录到 dbox 用户下进行启动，启动代码为<code> ./dropbox.py start</code> 可以用 <code>ps -e</code>命令来查看当前进程看看有没有成功启动</li><li>关闭局域网同步 <code>./dropbox.py lansync n </code>话说不关应该也没事<br><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-16-34-25.jpg"></li></ul><h2 id="安装并配置Nginx"><a href="#安装并配置Nginx" class="headerlink" title="安装并配置Nginx"></a>安装并配置Nginx</h2><p>注意：如果有单独数据盘，建议您先挂载数据盘，建议将网站内容、数据库放在数据盘中。如何挂载数据盘，请参考（支持阿里云、腾讯云）：<a href="http://oneinstack.com/question/how-to-mount-a-data-disc/">《如何利用脚本自动化挂载数据盘？》</a></p><ol><li>安装步骤参考：<a href="https://oneinstack.com/install/">安装说明</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget screen curl python   <span class="comment">#for CentOS/Redhat # </span></span><br><span class="line">apt-get -y install wget screen curl python  <span class="comment">#for Debian/Ubuntu wget http://aliyun-oss.linuxeye.com/oneinstack-full.tar.gz    </span></span><br><span class="line"><span class="comment">#阿里云用户下载 </span></span><br><span class="line">wget http://mirrors.linuxeye.com/oneinstack-full.tar.gz    </span><br><span class="line"><span class="comment">#包含源码，国内外均可下载 </span></span><br><span class="line">wget http://mirrors.linuxeye.com/oneinstack.tar.gz    </span><br><span class="line"><span class="comment">#不包含源码，建议仅国外主机下载 </span></span><br><span class="line">tar xzf oneinstack-full.tar.gz </span><br><span class="line"><span class="built_in">cd</span> oneinstack    </span><br><span class="line"><span class="comment">#如果需要修改目录(安装、数据存储、Nginx日志)，请修改options.conf文件 </span></span><br><span class="line">screen -S oneinstack    </span><br><span class="line"><span class="comment">#如果网路出现中断，可以执行命令`screen -r oneinstack`重新连接安装窗口 </span></span><br><span class="line">./install.sh     </span><br><span class="line"><span class="comment">#注：请勿sh install.sh或者bash install.sh这样执行</span></span><br></pre></td></tr></table></figure></li><li>安装好之后添加虚拟主机<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd oneinstack</span><br><span class="line">./vhost.sh</span><br></pre></td></tr></table></figure></li><li>修改Nginx配置文件<br>这里路径缓存你自己的虚拟主机路径，也就是你自己的域名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/vhost/blog.liangs.me.conf  (你的配置文件名)</span><br></pre></td></tr></table></figure>如果只想要静态的页面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        #listen [::]:80;</span><br><span class="line">        server_name blog.liangs.me;   (你的站点域名)</span><br><span class="line">        index index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">        root  /root/Dropbox/hexo/public;   (hexo的目录)</span><br><span class="line">        ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>如果要想实现<code>hexo s</code>后实时动态的页面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name blog.liangs.me;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:4000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>增加文件夹权限，否则会出现[permission denied]错误无法同步文件。根据你的目录来，还有我是直接都赋予777属性(所有人可以读写运行)了以防出错，<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 /root/Dropbox/hexo/public</span><br><span class="line">chown www:www /root/Dropbox/hexo/public</span><br><span class="line">chmod +x /root/ /root/Dropbox/ /root/Dropbox/hexo/</span><br></pre></td></tr></table></figure>然后重启nginx<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h2 id="内容同步发布"><a href="#内容同步发布" class="headerlink" title="内容同步发布"></a>内容同步发布</h2></li><li>安装和配置 incrond 检测文件变化。incrond 可以监控指定目录的文件指定变化(删除修改打开移动等等)，并且运行指定命令。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install incron</span><br></pre></td></tr></table></figure>启动并加入自启<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service incrond start</span><br><span class="line">chkconfig incrond on</span><br></pre></td></tr></table></figure>修改默认编辑器为 Vi (貌似默认编辑器本来是一个 GUI，我们远程状态下没有 GUI)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;editor = vi&#x27; &gt;&gt; /etc/incron.conf</span><br></pre></td></tr></table></figure>这个时候使用以下命令来进行编辑<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrontab -e</span><br></pre></td></tr></table></figure>打开后添加：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/笔记/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/结绳纪/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/拾摘/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/source/_posts/萱苏小筑/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br><span class="line">/home/ubuntu/Dropbox/hexo/themes/ IN_MODIFY,IN_CREATE,IN_DELETE,IN_MOVE /home/ubuntu/Dropbox/hexo/hexo.sh</span><br></pre></td></tr></table></figure>设置定时任务，方法参照<a href="http://www.liangshichao.com/2017/03/19/%E7%AC%94%E8%AE%B0/2017-03-19.Linux%20%E4%B8%8B%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%20crontab%20%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/">这里</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* */1 * * * sh /root/runhexo.sh</span><br></pre></td></tr></table></figure><p>会使用到的一些命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service incrond stop</span><br><span class="line">service incrond start</span><br><span class="line">service incrond status</span><br></pre></td></tr></table></figure><p>最后写 runhexo 这个脚本</p><ul><li>首先我们可以用以下指令新建空文本  <code>touch runhexo.sh</code> 注意要在 root 目录下创建。目录要对应你在 incrontab 的里写的目录。</li><li>然后打开文件进行编辑 <code>vim /root/runhexo.sh</code> </li><li>代码如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">exec</span> 200&lt;<span class="variable">$0</span></span><br><span class="line">flock -n 200 || <span class="built_in">exit</span> 1</span><br><span class="line">sleep 10</span><br><span class="line"><span class="built_in">cd</span> /root/Dropbox/hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"><span class="built_in">cd</span> /root/Dropbox/hexo/<span class="built_in">source</span>/ &amp;&amp; git add -A &amp;&amp; git commit -m <span class="string">&quot;auto commit&quot;</span> &amp;&amp; git push</span><br></pre></td></tr></table></figure>上面push到github还需要配置SSH等步骤，见后面的描述。<br>以上代码会在特定时间内只允许一个脚本实例运行。运行后会清理 Hexo 原有的静态文件, 生成新的静态文件以供读取，并且会自动传到相应的Github上的repo备份。<br>好了到这里就应该可以了。然后可以 debug 测试一下，并且可以关机给服务器搞个 snapshot 快照进行备份，以防以后出错 (重启后记得手动运行一下 Dropbox)。</li></ul><h2 id="使用hexo-hey插件为博客添加后台编辑"><a href="#使用hexo-hey插件为博客添加后台编辑" class="headerlink" title="使用hexo-hey插件为博客添加后台编辑"></a>使用hexo-hey插件为博客添加后台编辑</h2><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-17-20-09.jpg"><br>hexo-hey项目地址:<a href="https://github.com/nihgwu/hexo-hey">https://github.com/nihgwu/hexo-hey</a><br>安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-hey --save</span><br></pre></td></tr></table></figure><p>配置<code>_config.yml</code>文件<br>添加如下几行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Admin</span><br><span class="line">admin:</span><br><span class="line">    name: hexo</span><br><span class="line">    password: hey</span><br><span class="line">    secret: hey hexo</span><br><span class="line">    expire: 60*1</span><br><span class="line">    # cors: http://localhost:3000</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>这个时候你的博客网站的管理后台就可以远程的在你 VPS 的 IP地址的4000端口访问到。比如 <code>&lt;vps的ip&gt;:4000/admin</code>。</p><h2 id="配置Github-Coding多账号管理SSH-Key"><a href="#配置Github-Coding多账号管理SSH-Key" class="headerlink" title="配置Github/Coding多账号管理SSH Key"></a>配置Github/Coding多账号管理SSH Key</h2><ol><li>单个网站通过Https链接，避免22端口关闭错误。<br>测试https端口连通性<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure>添加ssh配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure>写入内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure></li><li>多网站多账号SSH Key配置</li></ol><ul><li>生成Github和Coidng的SSH Key<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -C “wmwwmv@gmail.com”</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_coding -C &quot;wmwwmv@163.com”</span><br></pre></td></tr></table></figure>检查key是否生成<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.ssh</span><br></pre></td></tr></table></figure></li><li>添加private key<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">ssh-add ~/.ssh/id_rsa_coding</span><br></pre></td></tr></table></figure>如果执行ssh-add时提示”Could not open a connection to your authentication agent”，可以先执行命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br></pre></td></tr></table></figure>然后再运行ssh-add命令。<br>可以通过 ssh-add -l 来确私钥列表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure>可以通过 ssh-add -D 来清空私钥列表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName ssh.github.com</span><br><span class="line">Port 443</span><br><span class="line">User wmwwmv@gmail.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"><span class="comment">#coding</span></span><br><span class="line">Host git.coding.net</span><br><span class="line">Hostname git-ssh.coding.net</span><br><span class="line">User wmwwmv@163.com</span><br><span class="line">Port 443</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_coding</span><br></pre></td></tr></table></figure></li><li>上传public key 到 GitHub/Coidng<br>GitHub设置过程如下：<br>登录github，点击右上方的图标，点击“Settings”</li></ul><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-17-56-16.jpg"><br>选择“SSH and GPG keys”，点击“New SSH key”，在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的 ~/.ssh/id_isa_github.pub 文件内容粘帖到 key 一栏，在点击“Add SSH key”按钮就可以了。</p><p><img src="https://images.liangs.me/bitcron/Notes/_image/2017-07-19-17-56-29.jpg"><br>添加过程github会提示你输入一次你的github密码 ，确认后即添加完毕。</p><ul><li>测试<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 测试github</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line"># 测试Coding</span><br><span class="line">$ ssh -T git@git.coding.net</span><br><span class="line"># 测试gitlab</span><br><span class="line">$ ssh -T git@gitlab.example.com</span><br></pre></td></tr></table></figure><code>_config.yml</code>配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    github: git@github.com:wmwwmv/wmwwmv.github.io.git</span><br><span class="line">    coding: git@git.coding.net:shichao/xiaozhu.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="hexo-deploy时重复输入用户名密码的问题"><a href="#hexo-deploy时重复输入用户名密码的问题" class="headerlink" title="hexo deploy时重复输入用户名密码的问题"></a>hexo deploy时重复输入用户名密码的问题</h3><p>每次部署执行hexo deploy都需要输入用户名<br><img src="https://images.liangs.me/bitcron/Notes/_image/b84f46c31486c0689dcb46fe856a3408_hexo-01.png"><br>问题原因及解决方案：<br>最主要的原因可能是你没有采用<a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;</a><br><img src="https://images.liangs.me/bitcron/Notes/_image/ff716f897db6f52aae3fe00d8a7e6ca5_hexo-04.png"><br>而是用https//github.com<br><img src="https://images.liangs.me/bitcron/Notes/_image/5a6545da6f259e0f0ee8a92550861cda_hexo-03.png"><br>修改后重新提交部署：<br><img src="https://images.liangs.me/bitcron/Notes/_image/9ac59c621f8f09f44cf517c55e0bec7d_hexo-02.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>为了避免上传一次就重新将pulic .git文件夹就同步一次，所以在本地Dropbox上要选择性同步。</li><li>想利用分布式解析国内解析到coding 国外解析到github，结果国内访问github比coding还快<br>这里可以解析国内到Coding的repo解析国外到github的repo</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>利用supervisor让hexo服务常驻后台<br>在<code>supervisord.conf</code>这个文件末尾加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/*.conf</span><br></pre></td></tr></table></figure><p>新建<code>hexo-server.conf</code>文件<br>写脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:hexo-server]</span><br><span class="line"><span class="built_in">command</span> = hexo s</span><br><span class="line">directory = /root/Dropbox/hexo</span><br><span class="line">user=root</span><br><span class="line">autostart = <span class="literal">true</span></span><br><span class="line">autorestart = <span class="literal">true</span></span><br><span class="line">stdout_logfile = /var/<span class="built_in">log</span>/supervisor/hexo.log</span><br><span class="line">stderr_logfile = /var/<span class="built_in">log</span>/supervisor/hexo_err.log</span><br></pre></td></tr></table></figure><p>supervisor的一些命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">supervisord，初始启动Supervisord，启动、管理配置中设置的进程。</span><br><span class="line">supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是chatdemon。</span><br><span class="line">supervisorctl start programxxx，  启动某个进程</span><br><span class="line">supervisorctl restart programxxx，重启某个进程</span><br><span class="line">supervisorctl stop groupworker: ，重启所有属于名为groupworker这个分组的进程(start,restart同理)</span><br><span class="line">supervisorctl stop all，          停止全部进程，注：start、restart、stop都不会载入最新的配置文件。</span><br><span class="line">supervisorctl reload，            载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</span><br><span class="line">supervisorctl update，            根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</span><br></pre></td></tr></table></figure><ul><li>Git同步之前需要先做些准备工作:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/Dropbox/hexo/source/ &amp;&amp; git add 404 readme.md about _drafts _posts about tags resources &amp;&amp; git commit -m &quot;auto commit&quot; &amp;&amp; git remote add origin git@github.com:wmwwmv/BlogBackup.git &amp;&amp; git push -u origin master</span><br></pre></td></tr></table></figure></li><li>使用MarkdownEditor的fileshook<br>命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; cd source/ &amp;&amp; git add -A &amp;&amp; git commit -m &quot;auto commit&quot; &amp;&amp; git push</span><br></pre></td></tr></table></figure>然后将第三方云设置成七牛的图床就更加完美了，不仅能拖入普遍自动生成链接，还可以自动发布。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.imfer.me/#!/post/2014-04-25-centos-install-dropbox">centos 使用 Dropbox 同步</a></li><li><a href="http://www.centoscn.com/CentOS/2015/0313/4877.html">CentOS入门 &gt;centos7关闭防火墙</a></li><li><a href="http://www.imooc.com/article/4433">hexo deploy时重复输入用户名密码的问题</a></li><li><a href="http://www.cnblogs.com/edward2013/p/5396254.html">CentOS7上GitHub/GitLab多帐号管理SSH Key</a></li><li><a href="https://ipe6.com/?p=28">Hexo+Dropbox+VPS搭建博客小记</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.liangs.me/bitcron/Notes/_image/2017-07-17-16-56-13.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装前准备&quot;&gt;&lt;a href=&quot;#安装前准备&quot; class=&quot;headerlink&quot; title=&quot;安装前准备&quot;&gt;&lt;/a&gt;安装前准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先登陆vps需要执行如下命令更新各种依赖&lt;/li&gt;
&lt;li&gt;为防止机器没有安装epel，先安装epel(必须安装)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;升级 CentOs 内核 &lt;code&gt;yum -y update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装 Git &lt;code&gt;yum install git-core&lt;/code&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.zhiiker.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="https://www.zhiiker.com/tags/Hexo/"/>
    
      <category term="Dropbox" scheme="https://www.zhiiker.com/tags/Dropbox/"/>
    
      <category term="Incrond" scheme="https://www.zhiiker.com/tags/Incrond/"/>
    
  </entry>
  
  <entry>
    <title>将不同地方文件夹同步到Dropbox</title>
    <link href="https://www.zhiiker.com/2017/07/17/%E7%AC%94%E8%AE%B0/2017-07-17.%E5%B0%86%E4%B8%8D%E5%90%8C%E5%9C%B0%E6%96%B9%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8C%E6%AD%A5%E5%88%B0Dropbox/"/>
    <id>https://www.zhiiker.com/2017/07/17/笔记/2017-07-17.将不同地方文件夹同步到Dropbox/</id>
    <published>2017-07-17T13:32:17.000Z</published>
    <updated>2017-07-17T13:35:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用软链接命令就可以解决。<br>在windows下使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /d &lt;Dropbox文件夹地址&gt; &lt;需要同步文件夹地址&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.zhiiker.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Dropbox" scheme="https://www.zhiiker.com/tags/Dropbox/"/>
    
  </entry>
  
</feed>
